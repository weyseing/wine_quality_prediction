1743699464928:winequality <- read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv", sep = ";")
1743699500464:winequality <- read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv", sep = ";")
1743699502112:winequality
1743701037359:summary(winequality)
1743701105272:tail(winequality, n = 3)
1743701325074:tail(winequality, n = 3)
1743701325082:# summary
1743701325082:summary(winequality)
1743701338932:source("~/wine_quality_predict.R", echo=TRUE)
1743701340621:tail(winequality, n = 3)
1743701340627:# summary
1743701340627:summary(winequality)
1743701344395:tail(winequality, n = 3)
1743701344399:# summary
1743701344399:summary(winequality)
1743701551206:tail(winequality, n = 3)
1743701551211:# summary
1743701551211:summary(winequality)
1743702423195:outlier (detect)
1743702427305:# outlier (detect)
1743702427305:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743702427305:# IQR method
1743702427305:detect_outliers <- function(x) {
1743702427306:Q1 <- quantile(x, 0.25, na.rm = TRUE)
1743702427306:Q3 <- quantile(x, 0.75, na.rm = TRUE)
1743702427306:IQR <- Q3 - Q1
1743702427306:lower_bound <- Q1 - 1.5 * IQR
1743702427306:upper_bound <- Q3 + 1.5 * IQR
1743702427306:return(list(lower = lower_bound, upper = upper_bound))
1743702427307:}
1743702427307:rs_bounds <- detect_outliers(winequality$residual.sugar)
1743702427309:cat("Residual Sugar Outlier Bounds:", rs_bounds$lower, "to", rs_bounds$upper, "\n")
1743702511333:# winsorize outliers (cap at 1st and 99th percentiles)
1743702511334:winsorize <- function(x) {
1743702511334:quantiles <- quantile(x, probs = c(0.01, 0.99), na.rm = TRUE)
1743702511334:x[x < quantiles[1]] <- quantiles[1]
1743702511334:x[x > quantiles[2]] <- quantiles[2]
1743702511334:return(x)
1743702511334:}
1743702562407:winequality <- winequality %>%
1743702562407:mutate(
1743702562407:residual.sugar = winsorize(residual.sugar),
1743702562407:chlorides = winsorize(chlorides),
1743702562407:total.sulfur.dioxide = winsorize(total.sulfur.dioxide)
1743702562407:)
1743702568299:# winsorize outliers (cap at 1st and 99th percentiles)
1743702568300:winsorize <- function(x) {
1743702568300:quantiles <- quantile(x, probs = c(0.01, 0.99), na.rm = TRUE)
1743702568300:x[x < quantiles[1]] <- quantiles[1]
1743702568301:x[x > quantiles[2]] <- quantiles[2]
1743702568301:return(x)
1743702568302:}
1743702568302:winequality <- winequality %>%
1743702568303:mutate(
1743702568303:residual.sugar = winsorize(residual.sugar),
1743702568303:chlorides = winsorize(chlorides),
1743702568303:total.sulfur.dioxide = winsorize(total.sulfur.dioxide)
1743702568303:)
1743702741133:boxplot(winequality$residual.sugar, main = "Residual Sugar Distribution", ylab = "Residual Sugar")
1743703171981:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743703171982:par(mfrow = c(1, 3))  # Arrange plots in 1 row, 3 columns
1743703171982:for (var in outlier_vars) {
1743703171982:boxplot(winequality[[var]],
1743703171982:main = paste(var, "Distribution"),
1743703171982:ylab = var)
1743703171982:}
1743703184835:detect_outliers <- function(x) {
1743703184836:Q1 <- quantile(x, 0.25, na.rm = TRUE)
1743703184836:Q3 <- quantile(x, 0.75, na.rm = TRUE)
1743703184836:IQR <- Q3 - Q1
1743703184836:lower_bound <- Q1 - 1.5 * IQR
1743703184836:upper_bound <- Q3 + 1.5 * IQR
1743703184836:return(list(lower = lower_bound, upper = upper_bound))
1743703184836:}
1743703242578:winsorize <- function(x) {
1743703242578:quantiles <- quantile(x, probs = c(0.01, 0.99), na.rm = TRUE)
1743703242579:x[x < quantiles[1]] <- quantiles[1]
1743703242579:x[x > quantiles[2]] <- quantiles[2]
1743703242579:return(x)
1743703242579:}
1743703253205:winequality <- winequality %>%
1743703253205:mutate(across(all_of(outlier_vars), ~ winsorize(.x)))
1743703550500:winsorize_iqr <- function(x) {
1743703550501:bounds <- detect_outliers(x)
1743703550501:x[x < bounds$lower] <- bounds$lower  # Replace lower outliers with Q1 - 1.5*IQR
1743703550501:x[x > bounds$upper] <- bounds$upper  # Replace upper outliers with Q3 + 1.5*IQR
1743703550501:return(x)
1743703550502:}
1743703550502:winequality <- winequality %>%
1743703550502:mutate(across(all_of(outlier_vars), ~ winsorize(.x)))
1743703591784:install.packages("dplyr")
1743703621960:library(dplyr)
1743703655163:# winsorize outliers
1743703655163:winsorize_iqr <- function(x) {
1743703655164:bounds <- detect_outliers(x)
1743703655164:x[x < bounds$lower] <- bounds$lower  # Replace lower outliers with Q1 - 1.5*IQR
1743703655164:x[x > bounds$upper] <- bounds$upper  # Replace upper outliers with Q3 + 1.5*IQR
1743703655164:return(x)
1743703655164:}
1743703655165:winequality <- winequality %>%
1743703655165:mutate(across(all_of(outlier_vars), ~ winsorize(.x)))
1743703655201:tail(winequality, n=3)
1743703674036:summary(winequality)
1743703686168:winequality <- read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv", sep = ";")
1743703687590:tail(winequality, n=3)
1743703687598:# summary
1743703687599:summary(winequality)
1743836381409:install.packages("dplyr")
1743836383829:library(dplyr)
1743836384469:# dataset
1743836384469:winequality <- read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv", sep = ";")
1743836386694:tail(winequality, n=3)
1743836386699:# summary
1743836386699:summary(winequality)
1743836386709:# outlier (verify)
1743836386710:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743836386710:par(mfrow = c(1, 3))  # Arrange plots in 1 row, 3 columns
1743836386780:for (var in outlier_vars) {
1743836386780:boxplot(winequality[[var]],
1743836386780:main = paste(var, "Distribution"),
1743836386780:ylab = var)
1743836386781:}
1743836386868:# IQR
1743836386868:detect_outliers <- function(x) {
1743836386868:Q1 <- quantile(x, 0.25, na.rm = TRUE)
1743836386868:Q3 <- quantile(x, 0.75, na.rm = TRUE)
1743836386869:IQR <- Q3 - Q1
1743836386869:lower_bound <- Q1 - 1.5 * IQR
1743836386869:upper_bound <- Q3 + 1.5 * IQR
1743836386869:return(list(lower = lower_bound, upper = upper_bound))
1743836386869:}
1743836386870:# winsorize outliers
1743836386870:winsorize_iqr <- function(x) {
1743836386870:bounds <- detect_outliers(x)
1743836386871:x[x < bounds$lower] <- bounds$lower  # Replace lower outliers with Q1 - 1.5*IQR
1743836386871:x[x > bounds$upper] <- bounds$upper  # Replace upper outliers with Q3 + 1.5*IQR
1743836386871:return(x)
1743836386871:}
1743836386872:winequality <- winequality %>%
1743836386872:mutate(across(all_of(outlier_vars), ~ winsorize(.x)))
1743836577790:# IQR
1743836577790:detect_outliers <- function(x) {
1743836577791:Q1 <- quantile(x, 0.25, na.rm = TRUE)
1743836577791:Q3 <- quantile(x, 0.75, na.rm = TRUE)
1743836577791:IQR <- Q3 - Q1
1743836577791:lower_bound <- Q1 - 1.5 * IQR
1743836577791:upper_bound <- Q3 + 1.5 * IQR
1743836577791:return(list(lower = lower_bound, upper = upper_bound))
1743836577791:}
1743836577792:# winsorize outliers
1743836577792:winsorize_iqr <- function(x) {
1743836577793:bounds <- detect_outliers(x)
1743836577794:x[x < bounds$lower] <- bounds$lower  # Replace lower outliers with Q1 - 1.5*IQR
1743836577794:x[x > bounds$upper] <- bounds$upper  # Replace upper outliers with Q3 + 1.5*IQR
1743836577794:return(x)
1743836577794:}
1743836577795:winequality <- winequality %>%
1743836577795:mutate(across(all_of(outlier_vars), ~ winsorize_iqr(.x)))
1743836577811:tail(winequality, n=3)
1743836577814:summary(winequality)
1743836602424:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743836602424:par(mfrow = c(1, 3))  # Arrange plots in 1 row, 3 columns
1743836602425:for (var in outlier_vars) {
1743836602425:boxplot(winequality[[var]],
1743836602425:main = paste(var, "Distribution"),
1743836602425:ylab = var)
1743836602425:}
1743836611012:# dataset
1743836611012:winequality <- read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv", sep = ";")
1743836612277:tail(winequality, n=3)
1743836613686:# summary
1743836613686:summary(winequality)
1743836615715:# outlier (verify)
1743836615717:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743836615717:par(mfrow = c(1, 3))  # Arrange plots in 1 row, 3 columns
1743836615717:for (var in outlier_vars) {
1743836615717:boxplot(winequality[[var]],
1743836615718:main = paste(var, "Distribution"),
1743836615718:ylab = var)
1743836615718:}
1743836709427:png("outlier_check_before.png", width = 1200, height = 400)
1743836709428:par(mfrow = c(1, 3))
1743836709428:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743836709428:for (var in outlier_vars) {
1743836709428:boxplot(winequality[[var]],
1743836709428:main = paste(var, "Distribution"),
1743836709428:ylab = var)
1743836709428:}
1743836709461:dev.off()
1743836758013:# IQR
1743836758014:detect_outliers <- function(x) {
1743836758014:Q1 <- quantile(x, 0.25, na.rm = TRUE)
1743836758014:Q3 <- quantile(x, 0.75, na.rm = TRUE)
1743836758014:IQR <- Q3 - Q1
1743836758015:lower_bound <- Q1 - 1.5 * IQR
1743836758015:upper_bound <- Q3 + 1.5 * IQR
1743836758015:return(list(lower = lower_bound, upper = upper_bound))
1743836758015:}
1743836758016:# winsorize outliers
1743836758016:winsorize_iqr <- function(x) {
1743836758016:bounds <- detect_outliers(x)
1743836758016:x[x < bounds$lower] <- bounds$lower  # Replace lower outliers with Q1 - 1.5*IQR
1743836758017:x[x > bounds$upper] <- bounds$upper  # Replace upper outliers with Q3 + 1.5*IQR
1743836758017:return(x)
1743836758017:}
1743836758017:winequality <- winequality %>%
1743836758018:mutate(across(all_of(outlier_vars), ~ winsorize_iqr(.x)))
1743836758049:tail(winequality, n=3)
1743836758062:summary(winequality)
1743836760404:# check outlier
1743836760405:png("outlier_check_before.png", width = 1200, height = 400)
1743836760406:par(mfrow = c(1, 3))
1743836760406:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743836760407:for (var in outlier_vars) {
1743836760407:boxplot(winequality[[var]],
1743836760407:main = paste(var, "Distribution"),
1743836760407:ylab = var)
1743836760408:}
1743836760419:dev.off()
1743836769385:# library
1743836769385:install.packages("dplyr")
1743836769434:library(dplyr)
1743836769435:# dataset
1743836769435:winequality <- read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv", sep = ";")
1743836771414:tail(winequality, n=3)
1743836771417:# summary
1743836771417:summary(winequality)
1743836771426:# check outlier
1743836771427:png("outlier_check_before.png", width = 1200, height = 400)
1743836771427:par(mfrow = c(1, 3))
1743836771427:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743836771428:for (var in outlier_vars) {
1743836771428:boxplot(winequality[[var]],
1743836771428:main = paste(var, "Distribution"),
1743836771428:ylab = var)
1743836771428:}
1743836771440:dev.off()
1743836771459:# IQR
1743836771459:detect_outliers <- function(x) {
1743836771459:Q1 <- quantile(x, 0.25, na.rm = TRUE)
1743836771459:Q3 <- quantile(x, 0.75, na.rm = TRUE)
1743836771459:IQR <- Q3 - Q1
1743836771459:lower_bound <- Q1 - 1.5 * IQR
1743836771459:upper_bound <- Q3 + 1.5 * IQR
1743836771459:return(list(lower = lower_bound, upper = upper_bound))
1743836771460:}
1743836771460:# winsorize outliers
1743836771460:winsorize_iqr <- function(x) {
1743836771460:bounds <- detect_outliers(x)
1743836771460:x[x < bounds$lower] <- bounds$lower  # Replace lower outliers with Q1 - 1.5*IQR
1743836771460:x[x > bounds$upper] <- bounds$upper  # Replace upper outliers with Q3 + 1.5*IQR
1743836771460:return(x)
1743836771460:}
1743836771461:winequality <- winequality %>%
1743836771461:mutate(across(all_of(outlier_vars), ~ winsorize_iqr(.x)))
1743836771476:tail(winequality, n=3)
1743836771480:summary(winequality)
1743836771489:# check outlier
1743836771489:png("outlier_check_after.png", width = 1200, height = 400)
1743836771489:par(mfrow = c(1, 3))
1743836771490:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743836771490:for (var in outlier_vars) {
1743836771490:boxplot(winequality[[var]],
1743836771490:main = paste(var, "Distribution"),
1743836771490:ylab = var)
1743836771490:}
1743836771500:dev.off()
1743836772466:install.packages("dplyr")
1743837786952:library(e1071)
1743837796375:install.packages("e1071")
1743837804366:library(e1071)
1743837882424:original_skewness <- sapply(winequality[, outlier_vars], skewness)
1743837882425:print("Original Skewness:")
1743837882426:print(original_skewness)
1743838041892:library(gridExtra)
1743838054545:original_plots <- lapply(outlier_vars, function(var) {
1743838054545:skew_val <- round(skewness(winequality[[var]]), 2)
1743838054545:ggplot(winequality, aes_string(var)) +
1743838054545:geom_histogram(bins = 30, fill = "lightblue", color = "black") +
1743838054546:geom_vline(aes(xintercept = mean(winequality[[var]])),
1743838054546:color = "red", linetype = "dashed") +
1743838054546:annotate("text", x = Inf, y = Inf,
1743838054546:label = paste("Skewness:", skew_val),
1743838054547:hjust = 1.2, vjust = 1.2, size = 4) +
1743838054547:ggtitle(paste("Original", var)) +
1743838054547:theme_minimal()
1743838054548:})
1743838068980:library(gridExtra)
1743838113871:install.packages("gridExtra")
1743838118679:library(gridExtra)
1743838124641:install.packages("ggplot2")
1743838148505:# dataset
1743838148505:winequality <- read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv", sep = ";")
1743838150546:library(ggplot2)
1743838150633:original_plots <- lapply(outlier_vars, function(var) {
1743838150634:skew_val <- round(skewness(winequality[[var]]), 2)
1743838150634:ggplot(winequality, aes_string(var)) +
1743838150634:geom_histogram(bins = 30, fill = "lightblue", color = "black") +
1743838150634:geom_vline(aes(xintercept = mean(winequality[[var]])),
1743838150634:color = "red", linetype = "dashed") +
1743838150634:annotate("text", x = Inf, y = Inf,
1743838150634:label = paste("Skewness:", skew_val),
1743838150634:hjust = 1.2, vjust = 1.2, size = 4) +
1743838150635:ggtitle(paste("Original", var)) +
1743838150635:theme_minimal()
1743838150635:})
1743838169051:# log transformation
1743838169051:winequality <- winequality %>%
1743838169051:mutate(across(all_of(outlier_vars), ~ log1p(.x)))
1743838184114:transformed_plots <- lapply(outlier_vars, function(var) {
1743838184114:skew_val <- round(skewness(winequality[[var]]), 2)
1743838184115:ggplot(winequality, aes(x = .data[[var]])) +
1743838184115:geom_histogram(bins = 30, fill = "lightgreen", color = "black") +
1743838184115:geom_vline(aes(xintercept = mean(.data[[var]])),
1743838184115:color = "darkgreen", linetype = "dashed") +
1743838184115:annotate("text", x = Inf, y = Inf,
1743838184115:label = paste("Skewness:", skew_val),
1743838184116:hjust = 1.2, vjust = 1.2, size = 4) +
1743838184116:ggtitle(paste("Transformed", var)) +
1743838184116:theme_minimal()
1743838184116:})
1743838194069:combined_plots <- c(original_plots, transformed_plots)
1743838194070:do.call(grid.arrange, c(combined_plots, ncol = 3, nrow = 2))
1743838464777:# display plots
1743838464777:combined_plots <- c(original_plots, transformed_plots)
1743838464777:do.call(grid.arrange, c(combined_plots, ncol = 3, nrow = 2))
1743838488332:summary(winequality)
1743838730288:# library
1743838730289:install.packages("dplyr")
1743838730291:install.packages("e1071")
1743838730292:install.packages("gridExtra")
1743838730293:install.packages("ggplot2")
1743838730294:library(dplyr)
1743838730295:library(e1071)
1743838730295:library(gridExtra)
1743838730296:library(ggplot2)
1743838730296:# dataset
1743838730296:winequality <- read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv", sep = ";")
1743838731965:tail(winequality, n=3)
1743838731971:# summary
1743838731971:summary(winequality)
1743838731981:# === OUTLIER HANDLING ===
1743838731981:# check outlier
1743838731983:png("outlier_check_before.png", width = 1200, height = 400)
1743838731984:par(mfrow = c(1, 3))
1743838731984:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743838731984:for (var in outlier_vars) {
1743838731985:boxplot(winequality[[var]],
1743838731985:main = paste(var, "Distribution"),
1743838731985:ylab = var)
1743838731985:}
1743838731997:dev.off()
1743838732018:# IQR
1743838732018:detect_outliers <- function(x) {
1743838732018:Q1 <- quantile(x, 0.25, na.rm = TRUE)
1743838732019:Q3 <- quantile(x, 0.75, na.rm = TRUE)
1743838732019:IQR <- Q3 - Q1
1743838732019:lower_bound <- Q1 - 1.5 * IQR
1743838732019:upper_bound <- Q3 + 1.5 * IQR
1743838732019:return(list(lower = lower_bound, upper = upper_bound))
1743838732019:}
1743838732019:# winsorize outliers
1743838732019:winsorize_iqr <- function(x) {
1743838732019:bounds <- detect_outliers(x)
1743838732019:x[x < bounds$lower] <- bounds$lower  # Replace lower outliers with Q1 - 1.5*IQR
1743838732019:x[x > bounds$upper] <- bounds$upper  # Replace upper outliers with Q3 + 1.5*IQR
1743838732019:return(x)
1743838732020:}
1743838732020:winequality <- winequality %>%
1743838732020:mutate(across(all_of(outlier_vars), ~ winsorize_iqr(.x)))
1743838732035:tail(winequality, n=3)
1743838732037:summary(winequality)
1743838732044:# check outlier
1743838732044:png("outlier_check_after.png", width = 1200, height = 400)
1743838732045:par(mfrow = c(1, 3))
1743838732045:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743838732045:for (var in outlier_vars) {
1743838732046:boxplot(winequality[[var]],
1743838732046:main = paste(var, "Distribution"),
1743838732046:ylab = var)
1743838732046:}
1743838732107:dev.off()
1743838732128:install.packages("ggplot2")
1743838735119:install.packages("gridExtra")
1743838737130:install.packages("e1071")
1743838737131:install.packages("dplyr")
1743838738662:install.packages("dplyr")
1743838741080:install.packages("e1071")
1743838747552:skewness_report <- data.frame(
1743838747552:Variable = numeric_vars,
1743838747552:Skewness = round(sapply(winequality[, numeric_vars], skewness), 2)
1743838747552:)
1743838758019:numeric_vars <- names(winequality)[sapply(winequality, is.numeric)]
1743838758019:skewness_report <- data.frame(
1743838758019:Variable = numeric_vars,
1743838758019:Skewness = round(sapply(winequality[, numeric_vars], skewness), 2)
1743838758019:)
1743838761987:numeric_vars <- names(winequality)[sapply(winequality, is.numeric)]
1743838761987:skewness_report <- data.frame(
1743838761987:Variable = numeric_vars,
1743838761987:Skewness = round(sapply(winequality[, numeric_vars], skewness), 2)
1743838761988:)
1743838768907:# calc skewness
1743838768907:numeric_vars <- names(winequality)[sapply(winequality, is.numeric)]
1743838771817:skewness_report <- data.frame(
1743838771817:Variable = numeric_vars,
1743838771817:Skewness = round(sapply(winequality[, numeric_vars], skewness), 2)
1743838771818:)
1743838781345:skewness_report <- skewness_report[order(-abs(skewness_report$Skewness)), ]
1743838787787:print("Skewness Report (Before Transformation):")
1743838787787:print(skewness_report)
1743838904992:high_skew_vars <- skewness_report %>%
1743838904992:filter(Skewness > 1) %>%
1743838904992:pull(Variable)
1743838908627:# check skewness
1743838908627:original_plots <- lapply(high_skew_vars, function(var) {
1743838908627:skew_val <- round(skewness(winequality[[var]]), 2)
1743838908627:ggplot(winequality, aes_string(var)) +
1743838908627:geom_histogram(bins = 30, fill = "lightblue", color = "black") +
1743838908627:geom_vline(aes(xintercept = mean(winequality[[var]])),
1743838908627:color = "red", linetype = "dashed") +
1743838908628:annotate("text", x = Inf, y = Inf,
1743838908628:label = paste("Skewness:", skew_val),
1743838908628:hjust = 1.2, vjust = 1.2, size = 4) +
1743838908628:ggtitle(paste("Original", var)) +
1743838908628:theme_minimal()
1743838908628:})
1743838911955:# log transformation
1743838911955:winequality <- winequality %>%
1743838911955:mutate(across(all_of(outlier_vars), ~ log1p(.x)))
1743838911961:# check skewness
1743838911961:transformed_plots <- lapply(outlier_vars, function(var) {
1743838911961:skew_val <- round(skewness(winequality[[var]]), 2)
1743838911961:ggplot(winequality, aes(x = .data[[var]])) +
1743838911961:geom_histogram(bins = 30, fill = "lightgreen", color = "black") +
1743838911961:geom_vline(aes(xintercept = mean(.data[[var]])),
1743838911961:color = "darkgreen", linetype = "dashed") +
1743838911962:annotate("text", x = Inf, y = Inf,
1743838911962:label = paste("Skewness:", skew_val),
1743838911962:hjust = 1.2, vjust = 1.2, size = 4) +
1743838911962:ggtitle(paste("Transformed", var)) +
1743838911962:theme_minimal()
1743838911962:})
1743838912011:# display plots
1743838912011:combined_plots <- c(original_plots, transformed_plots)
1743838912011:do.call(grid.arrange, c(combined_plots, ncol = 3, nrow = 2))
1743839025334:do.call(grid.arrange, c(combined_plots, ncol = 3, nrow = 2))
1743839026036:combined_plots <- c(original_plots, transformed_plots)
1743839026036:dev.off()
1743839068271:ggsave(
1743839068271:"log_transformation_comparison.png",
1743839068271:arrangeGrob(grobs = combined_plots, ncol = 3, nrow = 2),
1743839068271:width = 14, height = 8
1743839068271:)
1743839084364:ggsave(
1743839084365:"log_transformation.png",
1743839084365:arrangeGrob(grobs = combined_plots, ncol = 3, nrow = 2),
1743839084365:width = 14, height = 8
1743839084365:)
1743842263997:install.packages("VIM")
1743842384262:install.packages("mice")
1743842438253:library(VIM)
1743842439418:library(mice)
1743842439845:library(VIM)
1743842439845:library(mice)
1743842443643:# === MISSING VALUE HANDLING ====
1743842443643:sum(is.na(winequality))
1743842468846:set.seed(123)
1743842468847:winequality_missing <- winequality
1743842468847:for (col in names(winequality_missing)) {
1743842468847:if (is.numeric(winequality_missing[[col]])) {
1743842468847:winequality_missing[[col]][sample(1:nrow(winequality_missing), 50)] <- NA
1743842468847:}
1743842468847:}
1743842482843:missing_report <- data.frame(
1743842482844:Variable = names(winequality_missing),
1743842482844:Missing = sapply(winequality_missing, function(x) sum(is.na(x))),
1743842482844:Percent = round(sapply(winequality_missing, function(x) mean(is.na(x)))*100, 2)
1743842482844:)
1743842482848:print("Missing Value Report:")
1743842482848:print(missing_report)
1743842512791:method1 <- mice(winequality_missing,
1743842512792:method = "norm.mean",  # Mean imputation for numeric
1743842512792:m = 1,
1743842512792:maxit = 1,
1743842512792:printFlag = FALSE)
1743842520566:library(ggplot2)
1743842520566:library(VIM)
1743842520566:library(mice)
1743842525074:method1 <- mice(winequality_missing,
1743842525075:method = "norm.mean",  # Mean imputation for numeric
1743842525075:m = 1,
1743842525075:maxit = 1,
1743842525075:printFlag = FALSE)
1743842582013:method1 <- mice(
1743842582014:winequality_missing,
1743842582014:method = "mean",  # Correct method name for mean imputation
1743842582014:m = 1,
1743842582014:maxit = 1,
1743842582014:printFlag = FALSE
1743842582015:)
1743842582173:winequality_mean <- complete(method1)
1743842600821:# KNN imputation
1743842600822:method2 <- mice(
1743842600822:winequality_missing,
1743842600822:method = "pmm",
1743842600822:m = 1,
1743842600822:maxit = 1,
1743842600823:printFlag = FALSE
1743842600823:)
1743842600974:winequality_knn <- complete(method2)
1743842633854:compare_imputation <- function(original, method1, method2, var) {
1743842633854:# Original distribution
1743842633854:p1 <- ggplot(data.frame(value = original[[var]]), aes(x = value)) +
1743842633855:geom_density(color = "blue", fill = "blue", alpha = 0.3) +
1743842633855:ggtitle("Original Distribution")
1743842633855:# mean imputation
1743842633855:p2 <- ggplot(data.frame(value = method1[[var]]), aes(x = value)) +
1743842633855:geom_density(color = "red", fill = "red", alpha = 0.3) +
1743842633855:ggtitle("Mean Imputation")
1743842633856:# KNN imputation
1743842633856:p3 <- ggplot(data.frame(value = method2[[var]]), aes(x = value)) +
1743842633856:geom_density(color = "green", fill = "green", alpha = 0.3) +
1743842633857:ggtitle("K-NN Imputation")
1743842633857:grid.arrange(p1, p2, p3, ncol = 3)
1743842633858:}
1743842633858:compare_imputation(winequality, winequality_mean, winequality_knn, "residual.sugar")
1743842661200:# library
1743842661200:install.packages("dplyr")
1743842661203:install.packages("e1071")
1743842661205:install.packages("gridExtra")
1743842661208:install.packages("ggplot2")
1743842661209:install.packages("VIM")
1743842661211:install.packages("mice")
1743842661213:library(dplyr)
1743842661213:library(e1071)
1743842661213:library(gridExtra)
1743842661214:library(ggplot2)
1743842661214:library(VIM)
1743842661214:library(mice)
1743842661215:# dataset
1743842661215:winequality <- read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv", sep = ";")
1743842662463:tail(winequality, n=3)
1743842662466:# summary
1743842662467:summary(winequality)
1743842662475:# === OUTLIER HANDLING ===
1743842662476:# check outlier
1743842662476:png("outlier_check_before.png", width = 1200, height = 400)
1743842662476:par(mfrow = c(1, 3))
1743842662477:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743842662477:for (var in outlier_vars) {
1743842662477:boxplot(winequality[[var]],
1743842662477:main = paste(var, "Distribution"),
1743842662477:ylab = var)
1743842662478:}
1743842662488:dev.off()
1743842662507:# IQR
1743842662507:detect_outliers <- function(x) {
1743842662508:Q1 <- quantile(x, 0.25, na.rm = TRUE)
1743842662508:Q3 <- quantile(x, 0.75, na.rm = TRUE)
1743842662508:IQR <- Q3 - Q1
1743842662508:lower_bound <- Q1 - 1.5 * IQR
1743842662508:upper_bound <- Q3 + 1.5 * IQR
1743842662508:return(list(lower = lower_bound, upper = upper_bound))
1743842662508:}
1743842662508:# winsorize outliers
1743842662509:winsorize_iqr <- function(x) {
1743842662509:bounds <- detect_outliers(x)
1743842662509:x[x < bounds$lower] <- bounds$lower  # Replace lower outliers with Q1 - 1.5*IQR
1743842662509:x[x > bounds$upper] <- bounds$upper  # Replace upper outliers with Q3 + 1.5*IQR
1743842662509:return(x)
1743842662509:}
1743842662510:winequality <- winequality %>%
1743842662510:mutate(across(all_of(outlier_vars), ~ winsorize_iqr(.x)))
1743842662528:tail(winequality, n=3)
1743842662531:summary(winequality)
1743842662539:# check outlier
1743842662539:png("outlier_check_after.png", width = 1200, height = 400)
1743842662540:par(mfrow = c(1, 3))
1743842662540:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743842662540:for (var in outlier_vars) {
1743842662540:boxplot(winequality[[var]],
1743842662540:main = paste(var, "Distribution"),
1743842662540:ylab = var)
1743842662541:}
1743842662548:dev.off()
1743842662567:# === LOG TRANSFORMATION ===
1743842662567:# calc skewness
1743842662568:numeric_vars <- names(winequality)[sapply(winequality, is.numeric)]
1743842662568:skewness_report <- data.frame(
1743842662568:Variable = numeric_vars,
1743842662568:Skewness = round(sapply(winequality[, numeric_vars], skewness), 2)
1743842662568:)
1743842662571:skewness_report <- skewness_report[order(-abs(skewness_report$Skewness)), ]
1743842662571:print("Skewness Report (Before Transformation):")
1743842662571:print(skewness_report)
1743842662573:high_skew_vars <- skewness_report %>%
1743842662573:filter(Skewness > 1) %>%
1743842662573:pull(Variable)
1743842662575:# check skewness
1743842662575:original_plots <- lapply(high_skew_vars, function(var) {
1743842662575:skew_val <- round(skewness(winequality[[var]]), 2)
1743842662576:ggplot(winequality, aes_string(var)) +
1743842662576:geom_histogram(bins = 30, fill = "lightblue", color = "black") +
1743842662576:geom_vline(aes(xintercept = mean(winequality[[var]])),
1743842662576:color = "red", linetype = "dashed") +
1743842662576:annotate("text", x = Inf, y = Inf,
1743842662576:label = paste("Skewness:", skew_val),
1743842662576:hjust = 1.2, vjust = 1.2, size = 4) +
1743842662576:ggtitle(paste("Original", var)) +
1743842662577:theme_minimal()
1743842662577:})
1743842662613:# log transformation
1743842662613:winequality <- winequality %>%
1743842662613:mutate(across(all_of(outlier_vars), ~ log1p(.x)))
1743842662616:# check skewness
1743842662616:transformed_plots <- lapply(outlier_vars, function(var) {
1743842662616:skew_val <- round(skewness(winequality[[var]]), 2)
1743842662616:ggplot(winequality, aes(x = .data[[var]])) +
1743842662616:geom_histogram(bins = 30, fill = "lightgreen", color = "black") +
1743842662616:geom_vline(aes(xintercept = mean(.data[[var]])),
1743842662616:color = "darkgreen", linetype = "dashed") +
1743842662616:annotate("text", x = Inf, y = Inf,
1743842662616:label = paste("Skewness:", skew_val),
1743842662616:hjust = 1.2, vjust = 1.2, size = 4) +
1743842662616:ggtitle(paste("Transformed", var)) +
1743842662617:theme_minimal()
1743842662617:})
1743842662649:# display plots
1743842662649:ggsave(
1743842662649:"log_transformation.png",
1743842662649:arrangeGrob(grobs = combined_plots, ncol = 3, nrow = 2),
1743842662649:width = 14, height = 8
1743842662649:)
1743842663590:# === MISSING VALUE HANDLING ====
1743842663591:# check missing
1743842663591:sum(is.na(winequality))
1743842663591:# introduce missing value
1743842663591:set.seed(123)
1743842663592:winequality_missing <- winequality
1743842663592:for (col in names(winequality_missing)) {
1743842663592:if (is.numeric(winequality_missing[[col]])) {
1743842663592:winequality_missing[[col]][sample(1:nrow(winequality_missing), 50)] <- NA
1743842663592:}
1743842663592:}
1743842663597:# missing report
1743842663598:missing_report <- data.frame(
1743842663598:Variable = names(winequality_missing),
1743842663598:Missing = sapply(winequality_missing, function(x) sum(is.na(x))),
1743842663598:Percent = round(sapply(winequality_missing, function(x) mean(is.na(x)))*100, 2)
1743842663598:)
1743842663601:print("Missing Value Report:")
1743842663601:print(missing_report)
1743842663603:# mean imputation
1743842663603:method1 <- mice(
1743842663603:winequality_missing,
1743842663603:method = "mean",  # Correct method name for mean imputation
1743842663604:m = 1,
1743842663604:maxit = 1,
1743842663604:printFlag = FALSE
1743842663604:)
1743842663700:winequality_mean <- complete(method1)
1743842663702:# KNN imputation
1743842663702:method2 <- mice(
1743842663702:winequality_missing,
1743842663702:method = "pmm",
1743842663702:m = 1,
1743842663702:maxit = 1,
1743842663702:printFlag = FALSE
1743842663702:)
1743842663894:winequality_knn <- complete(method2)
1743842663897:# compare imputation
1743842663897:compare_imputation <- function(original, method1, method2, var) {
1743842663897:# Original distribution
1743842663897:p1 <- ggplot(data.frame(value = original[[var]]), aes(x = value)) +
1743842663897:geom_density(color = "blue", fill = "blue", alpha = 0.3) +
1743842663898:ggtitle("Original Distribution")
1743842663898:# mean imputation
1743842663898:p2 <- ggplot(data.frame(value = method1[[var]]), aes(x = value)) +
1743842663898:geom_density(color = "red", fill = "red", alpha = 0.3) +
1743842663899:ggtitle("Mean Imputation")
1743842663899:# KNN imputation
1743842663899:p3 <- ggplot(data.frame(value = method2[[var]]), aes(x = value)) +
1743842663899:geom_density(color = "green", fill = "green", alpha = 0.3) +
1743842663899:ggtitle("K-NN Imputation")
1743842663899:grid.arrange(p1, p2, p3, ncol = 3)
1743842663900:}
1743842663900:compare_imputation(winequality, winequality_mean, winequality_knn, "residual.sugar")
1743842707383:# library
1743842707383:# install.packages("dplyr")
1743842707383:# install.packages("e1071")
1743842707383:# install.packages("gridExtra")
1743842707384:# install.packages("ggplot2")
1743842707384:# install.packages("VIM")
1743842707384:# install.packages("mice")
1743842707384:library(dplyr)
1743842707384:library(e1071)
1743842707384:library(gridExtra)
1743842707384:library(ggplot2)
1743842707385:library(VIM)
1743842707385:library(mice)
1743842707385:# dataset
1743842707385:winequality <- read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv", sep = ";")
1743842708678:tail(winequality, n=3)
1743842708681:# summary
1743842708681:summary(winequality)
1743842708688:# === OUTLIER HANDLING ===
1743842708688:# check outlier
1743842708689:png("outlier_check_before.png", width = 1200, height = 400)
1743842708689:par(mfrow = c(1, 3))
1743842708689:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743842708689:for (var in outlier_vars) {
1743842708689:boxplot(winequality[[var]],
1743842708690:main = paste(var, "Distribution"),
1743842708690:ylab = var)
1743842708690:}
1743842708701:dev.off()
1743842708722:# IQR
1743842708722:detect_outliers <- function(x) {
1743842708722:Q1 <- quantile(x, 0.25, na.rm = TRUE)
1743842708722:Q3 <- quantile(x, 0.75, na.rm = TRUE)
1743842708723:IQR <- Q3 - Q1
1743842708723:lower_bound <- Q1 - 1.5 * IQR
1743842708723:upper_bound <- Q3 + 1.5 * IQR
1743842708723:return(list(lower = lower_bound, upper = upper_bound))
1743842708723:}
1743842708723:# winsorize outliers
1743842708723:winsorize_iqr <- function(x) {
1743842708723:bounds <- detect_outliers(x)
1743842708723:x[x < bounds$lower] <- bounds$lower  # Replace lower outliers with Q1 - 1.5*IQR
1743842708724:x[x > bounds$upper] <- bounds$upper  # Replace upper outliers with Q3 + 1.5*IQR
1743842708724:return(x)
1743842708724:}
1743842708724:winequality <- winequality %>%
1743842708724:mutate(across(all_of(outlier_vars), ~ winsorize_iqr(.x)))
1743842708738:tail(winequality, n=3)
1743842708740:summary(winequality)
1743842708746:# check outlier
1743842708746:png("outlier_check_after.png", width = 1200, height = 400)
1743842708747:par(mfrow = c(1, 3))
1743842708747:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743842708747:for (var in outlier_vars) {
1743842708747:boxplot(winequality[[var]],
1743842708747:main = paste(var, "Distribution"),
1743842708747:ylab = var)
1743842708747:}
1743842708755:dev.off()
1743842708775:# === LOG TRANSFORMATION ===
1743842708775:# calc skewness
1743842708776:numeric_vars <- names(winequality)[sapply(winequality, is.numeric)]
1743842708776:skewness_report <- data.frame(
1743842708776:Variable = numeric_vars,
1743842708776:Skewness = round(sapply(winequality[, numeric_vars], skewness), 2)
1743842708776:)
1743842708779:skewness_report <- skewness_report[order(-abs(skewness_report$Skewness)), ]
1743842708779:print("Skewness Report (Before Transformation):")
1743842708779:print(skewness_report)
1743842708783:high_skew_vars <- skewness_report %>%
1743842708783:filter(Skewness > 1) %>%
1743842708783:pull(Variable)
1743842708786:# check skewness
1743842708786:original_plots <- lapply(high_skew_vars, function(var) {
1743842708786:skew_val <- round(skewness(winequality[[var]]), 2)
1743842708786:ggplot(winequality, aes_string(var)) +
1743842708786:geom_histogram(bins = 30, fill = "lightblue", color = "black") +
1743842708786:geom_vline(aes(xintercept = mean(winequality[[var]])),
1743842708786:color = "red", linetype = "dashed") +
1743842708786:annotate("text", x = Inf, y = Inf,
1743842708787:label = paste("Skewness:", skew_val),
1743842708787:hjust = 1.2, vjust = 1.2, size = 4) +
1743842708787:ggtitle(paste("Original", var)) +
1743842708787:theme_minimal()
1743842708787:})
1743842708823:# log transformation
1743842708823:winequality <- winequality %>%
1743842708823:mutate(across(all_of(outlier_vars), ~ log1p(.x)))
1743842708826:# check skewness
1743842708826:transformed_plots <- lapply(outlier_vars, function(var) {
1743842708826:skew_val <- round(skewness(winequality[[var]]), 2)
1743842708826:ggplot(winequality, aes(x = .data[[var]])) +
1743842708826:geom_histogram(bins = 30, fill = "lightgreen", color = "black") +
1743842708826:geom_vline(aes(xintercept = mean(.data[[var]])),
1743842708826:color = "darkgreen", linetype = "dashed") +
1743842708826:annotate("text", x = Inf, y = Inf,
1743842708826:label = paste("Skewness:", skew_val),
1743842708826:hjust = 1.2, vjust = 1.2, size = 4) +
1743842708827:ggtitle(paste("Transformed", var)) +
1743842708827:theme_minimal()
1743842708827:})
1743842708889:# display plots
1743842708889:ggsave(
1743842708890:"log_transformation.png",
1743842708890:arrangeGrob(grobs = combined_plots, ncol = 3, nrow = 2),
1743842708890:width = 14, height = 8
1743842708890:)
1743842709890:# === MISSING VALUE HANDLING ====
1743842709891:# check missing
1743842709891:sum(is.na(winequality))
1743842709891:# introduce missing value
1743842709891:set.seed(123)
1743842709892:winequality_missing <- winequality
1743842709892:for (col in names(winequality_missing)) {
1743842709892:if (is.numeric(winequality_missing[[col]])) {
1743842709892:winequality_missing[[col]][sample(1:nrow(winequality_missing), 50)] <- NA
1743842709892:}
1743842709892:}
1743842709899:# missing report
1743842709899:missing_report <- data.frame(
1743842709899:Variable = names(winequality_missing),
1743842709899:Missing = sapply(winequality_missing, function(x) sum(is.na(x))),
1743842709899:Percent = round(sapply(winequality_missing, function(x) mean(is.na(x)))*100, 2)
1743842709900:)
1743842709903:print("Missing Value Report:")
1743842709903:print(missing_report)
1743842709905:# mean imputation
1743842709906:method1 <- mice(
1743842709906:winequality_missing,
1743842709906:method = "mean",  # Correct method name for mean imputation
1743842709906:m = 1,
1743842709906:maxit = 1,
1743842709906:printFlag = FALSE
1743842709906:)
1743842710001:winequality_mean <- complete(method1)
1743842710005:# KNN imputation
1743842710005:method2 <- mice(
1743842710005:winequality_missing,
1743842710005:method = "pmm",
1743842710005:m = 1,
1743842710006:maxit = 1,
1743842710006:printFlag = FALSE
1743842710006:)
1743842710141:winequality_knn <- complete(method2)
1743842710143:# compare imputation
1743842710144:compare_imputation <- function(original, method1, method2, var) {
1743842710144:# Original distribution
1743842710144:p1 <- ggplot(data.frame(value = original[[var]]), aes(x = value)) +
1743842710144:geom_density(color = "blue", fill = "blue", alpha = 0.3) +
1743842710144:ggtitle("Original Distribution")
1743842710145:# mean imputation
1743842710145:p2 <- ggplot(data.frame(value = method1[[var]]), aes(x = value)) +
1743842710145:geom_density(color = "red", fill = "red", alpha = 0.3) +
1743842710145:ggtitle("Mean Imputation")
1743842710145:# KNN imputation
1743842710145:p3 <- ggplot(data.frame(value = method2[[var]]), aes(x = value)) +
1743842710146:geom_density(color = "green", fill = "green", alpha = 0.3) +
1743842710146:ggtitle("K-NN Imputation")
1743842710146:grid.arrange(p1, p2, p3, ncol = 3)
1743842710146:}
1743842710146:compare_imputation(winequality, winequality_mean, winequality_knn, "residual.sugar")
1743842721887:missing_report <- data.frame(
1743842721887:Variable = names(winequality_missing),
1743842721887:Missing = sapply(winequality_missing, function(x) sum(is.na(x))),
1743842721888:Percent = round(sapply(winequality_missing, function(x) mean(is.na(x)))*100, 2)
1743842721888:)
1743842721894:print("Missing Value Report:")
1743842721894:print(missing_report)
1743842811133:# library
1743842811133:# install.packages("dplyr")
1743842811134:# install.packages("e1071")
1743842811134:# install.packages("gridExtra")
1743842811134:# install.packages("ggplot2")
1743842811134:# install.packages("VIM")
1743842811134:# install.packages("mice")
1743842811135:library(dplyr)
1743842811135:library(e1071)
1743842811135:library(gridExtra)
1743842811136:library(ggplot2)
1743842811136:library(VIM)
1743842811137:library(mice)
1743842811137:# dataset
1743842811137:winequality <- read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv", sep = ";")
1743842812719:tail(winequality, n=3)
1743842812722:# summary
1743842812722:summary(winequality)
1743842812730:# === OUTLIER HANDLING ===
1743842812731:# check outlier
1743842812731:png("outlier_check_before.png", width = 1200, height = 400)
1743842812731:par(mfrow = c(1, 3))
1743842812732:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743842812732:for (var in outlier_vars) {
1743842812732:boxplot(winequality[[var]],
1743842812732:main = paste(var, "Distribution"),
1743842812732:ylab = var)
1743842812732:}
1743842812744:dev.off()
1743842812763:# IQR
1743842812763:detect_outliers <- function(x) {
1743842812763:Q1 <- quantile(x, 0.25, na.rm = TRUE)
1743842812763:Q3 <- quantile(x, 0.75, na.rm = TRUE)
1743842812763:IQR <- Q3 - Q1
1743842812764:lower_bound <- Q1 - 1.5 * IQR
1743842812764:upper_bound <- Q3 + 1.5 * IQR
1743842812764:return(list(lower = lower_bound, upper = upper_bound))
1743842812764:}
1743842812764:# winsorize outliers
1743842812764:winsorize_iqr <- function(x) {
1743842812764:bounds <- detect_outliers(x)
1743842812765:x[x < bounds$lower] <- bounds$lower  # Replace lower outliers with Q1 - 1.5*IQR
1743842812765:x[x > bounds$upper] <- bounds$upper  # Replace upper outliers with Q3 + 1.5*IQR
1743842812765:return(x)
1743842812765:}
1743842812765:winequality <- winequality %>%
1743842812766:mutate(across(all_of(outlier_vars), ~ winsorize_iqr(.x)))
1743842812781:tail(winequality, n=3)
1743842812783:summary(winequality)
1743842812791:# check outlier
1743842812791:png("outlier_check_after.png", width = 1200, height = 400)
1743842812792:par(mfrow = c(1, 3))
1743842812792:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743842812792:for (var in outlier_vars) {
1743842812792:boxplot(winequality[[var]],
1743842812793:main = paste(var, "Distribution"),
1743842812793:ylab = var)
1743842812793:}
1743842812801:dev.off()
1743842812820:# === LOG TRANSFORMATION ===
1743842812820:# calc skewness
1743842812820:numeric_vars <- names(winequality)[sapply(winequality, is.numeric)]
1743842812820:skewness_report <- data.frame(
1743842812820:Variable = numeric_vars,
1743842812821:Skewness = round(sapply(winequality[, numeric_vars], skewness), 2)
1743842812821:)
1743842812824:skewness_report <- skewness_report[order(-abs(skewness_report$Skewness)), ]
1743842812824:print("Skewness Report (Before Transformation):")
1743842812824:print(skewness_report)
1743842812826:high_skew_vars <- skewness_report %>%
1743842812826:filter(Skewness > 1) %>%
1743842812826:pull(Variable)
1743842812828:# check skewness
1743842812828:original_plots <- lapply(high_skew_vars, function(var) {
1743842812828:skew_val <- round(skewness(winequality[[var]]), 2)
1743842812828:ggplot(winequality, aes_string(var)) +
1743842812828:geom_histogram(bins = 30, fill = "lightblue", color = "black") +
1743842812828:geom_vline(aes(xintercept = mean(winequality[[var]])),
1743842812829:color = "red", linetype = "dashed") +
1743842812829:annotate("text", x = Inf, y = Inf,
1743842812829:label = paste("Skewness:", skew_val),
1743842812829:hjust = 1.2, vjust = 1.2, size = 4) +
1743842812829:ggtitle(paste("Original", var)) +
1743842812829:theme_minimal()
1743842812829:})
1743842812875:# log transformation
1743842812876:winequality <- winequality %>%
1743842812876:mutate(across(all_of(outlier_vars), ~ log1p(.x)))
1743842812880:# check skewness
1743842812880:transformed_plots <- lapply(outlier_vars, function(var) {
1743842812880:skew_val <- round(skewness(winequality[[var]]), 2)
1743842812880:ggplot(winequality, aes(x = .data[[var]])) +
1743842812880:geom_histogram(bins = 30, fill = "lightgreen", color = "black") +
1743842812880:geom_vline(aes(xintercept = mean(.data[[var]])),
1743842812880:color = "darkgreen", linetype = "dashed") +
1743842812880:annotate("text", x = Inf, y = Inf,
1743842812881:label = paste("Skewness:", skew_val),
1743842812881:hjust = 1.2, vjust = 1.2, size = 4) +
1743842812881:ggtitle(paste("Transformed", var)) +
1743842812881:theme_minimal()
1743842812881:})
1743842812932:# display plots
1743842812932:ggsave(
1743842812932:"log_transformation.png",
1743842812932:arrangeGrob(grobs = combined_plots, ncol = 3, nrow = 2),
1743842812932:width = 14, height = 8
1743842812932:)
1743842813916:# === MISSING VALUE HANDLING ====
1743842813916:# check missing
1743842813916:sum(is.na(winequality))
1743842813917:# introduce missing value
1743842813917:set.seed(123)
1743842813917:winequality_missing <- winequality
1743842813917:predictor_vars <- setdiff(names(winequality_missing), "quality")
1743842813917:for (col in predictor_vars) {
1743842813917:if (is.numeric(winequality_missing[[col]])) {
1743842813918:winequality_missing[[col]][sample(1:nrow(winequality_missing), 50)] <- NA
1743842813918:}
1743842813918:}
1743842813923:# missing report
1743842813923:missing_report <- data.frame(
1743842813923:Variable = names(winequality_missing),
1743842813923:Missing = sapply(winequality_missing, function(x) sum(is.na(x))),
1743842813923:Percent = round(sapply(winequality_missing, function(x) mean(is.na(x)))*100, 2)
1743842813923:)
1743842813926:print("Missing Value Report:")
1743842813927:print(missing_report)
1743842813929:# mean imputation
1743842813929:method1 <- mice(
1743842813929:winequality_missing,
1743842813929:method = "mean",  # Correct method name for mean imputation
1743842813929:m = 1,
1743842813929:maxit = 1,
1743842813929:printFlag = FALSE
1743842813929:)
1743842814029:winequality_mean <- complete(method1)
1743842814038:# KNN imputation
1743842814038:method2 <- mice(
1743842814039:winequality_missing,
1743842814039:method = "pmm",
1743842814039:m = 1,
1743842814039:maxit = 1,
1743842814039:printFlag = FALSE
1743842814039:)
1743842814192:winequality_knn <- complete(method2)
1743842814194:# compare imputation
1743842814194:compare_imputation <- function(original, method1, method2, var) {
1743842814194:# Original distribution
1743842814194:p1 <- ggplot(data.frame(value = original[[var]]), aes(x = value)) +
1743842814194:geom_density(color = "blue", fill = "blue", alpha = 0.3) +
1743842814194:ggtitle("Original Distribution")
1743842814195:# mean imputation
1743842814195:p2 <- ggplot(data.frame(value = method1[[var]]), aes(x = value)) +
1743842814195:geom_density(color = "red", fill = "red", alpha = 0.3) +
1743842814195:ggtitle("Mean Imputation")
1743842814195:# KNN imputation
1743842814195:p3 <- ggplot(data.frame(value = method2[[var]]), aes(x = value)) +
1743842814195:geom_density(color = "green", fill = "green", alpha = 0.3) +
1743842814195:ggtitle("K-NN Imputation")
1743842814196:grid.arrange(p1, p2, p3, ncol = 3)
1743842814196:}
1743842814196:compare_imputation(winequality, winequality_mean, winequality_knn, "residual.sugar")
1743842823933:# library
1743842823933:# install.packages("dplyr")
1743842823933:# install.packages("e1071")
1743842823933:# install.packages("gridExtra")
1743842823933:# install.packages("ggplot2")
1743842823933:# install.packages("VIM")
1743842823933:# install.packages("mice")
1743842823933:library(dplyr)
1743842823934:library(e1071)
1743842823934:library(gridExtra)
1743842823934:library(ggplot2)
1743842823934:library(VIM)
1743842823934:library(mice)
1743842823934:# dataset
1743842823934:winequality <- read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv", sep = ";")
1743842825415:tail(winequality, n=3)
1743842825418:# summary
1743842825418:summary(winequality)
1743842825426:# === OUTLIER HANDLING ===
1743842825427:# check outlier
1743842825427:png("outlier_check_before.png", width = 1200, height = 400)
1743842825427:par(mfrow = c(1, 3))
1743842825427:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743842825428:for (var in outlier_vars) {
1743842825428:boxplot(winequality[[var]],
1743842825428:main = paste(var, "Distribution"),
1743842825428:ylab = var)
1743842825428:}
1743842825438:dev.off()
1743842825458:# IQR
1743842825458:detect_outliers <- function(x) {
1743842825458:Q1 <- quantile(x, 0.25, na.rm = TRUE)
1743842825459:Q3 <- quantile(x, 0.75, na.rm = TRUE)
1743842825459:IQR <- Q3 - Q1
1743842825459:lower_bound <- Q1 - 1.5 * IQR
1743842825459:upper_bound <- Q3 + 1.5 * IQR
1743842825459:return(list(lower = lower_bound, upper = upper_bound))
1743842825459:}
1743842825460:# winsorize outliers
1743842825460:winsorize_iqr <- function(x) {
1743842825460:bounds <- detect_outliers(x)
1743842825460:x[x < bounds$lower] <- bounds$lower  # Replace lower outliers with Q1 - 1.5*IQR
1743842825460:x[x > bounds$upper] <- bounds$upper  # Replace upper outliers with Q3 + 1.5*IQR
1743842825460:return(x)
1743842825461:}
1743842825461:winequality <- winequality %>%
1743842825461:mutate(across(all_of(outlier_vars), ~ winsorize_iqr(.x)))
1743842825475:tail(winequality, n=3)
1743842825478:summary(winequality)
1743842825486:# check outlier
1743842825486:png("outlier_check_after.png", width = 1200, height = 400)
1743842825487:par(mfrow = c(1, 3))
1743842825487:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743842825487:for (var in outlier_vars) {
1743842825488:boxplot(winequality[[var]],
1743842825488:main = paste(var, "Distribution"),
1743842825488:ylab = var)
1743842825488:}
1743842825496:dev.off()
1743842825516:# === LOG TRANSFORMATION ===
1743842825517:# calc skewness
1743842825517:numeric_vars <- names(winequality)[sapply(winequality, is.numeric)]
1743842825517:skewness_report <- data.frame(
1743842825517:Variable = numeric_vars,
1743842825517:Skewness = round(sapply(winequality[, numeric_vars], skewness), 2)
1743842825517:)
1743842825520:skewness_report <- skewness_report[order(-abs(skewness_report$Skewness)), ]
1743842825520:print("Skewness Report (Before Transformation):")
1743842825521:print(skewness_report)
1743842825523:high_skew_vars <- skewness_report %>%
1743842825523:filter(Skewness > 1) %>%
1743842825523:pull(Variable)
1743842825525:# check skewness
1743842825525:original_plots <- lapply(high_skew_vars, function(var) {
1743842825525:skew_val <- round(skewness(winequality[[var]]), 2)
1743842825525:ggplot(winequality, aes_string(var)) +
1743842825525:geom_histogram(bins = 30, fill = "lightblue", color = "black") +
1743842825525:geom_vline(aes(xintercept = mean(winequality[[var]])),
1743842825525:color = "red", linetype = "dashed") +
1743842825525:annotate("text", x = Inf, y = Inf,
1743842825526:label = paste("Skewness:", skew_val),
1743842825526:hjust = 1.2, vjust = 1.2, size = 4) +
1743842825526:ggtitle(paste("Original", var)) +
1743842825526:theme_minimal()
1743842825526:})
1743842825561:# log transformation
1743842825562:winequality <- winequality %>%
1743842825562:mutate(across(all_of(outlier_vars), ~ log1p(.x)))
1743842825564:# check skewness
1743842825564:transformed_plots <- lapply(outlier_vars, function(var) {
1743842825564:skew_val <- round(skewness(winequality[[var]]), 2)
1743842825565:ggplot(winequality, aes(x = .data[[var]])) +
1743842825565:geom_histogram(bins = 30, fill = "lightgreen", color = "black") +
1743842825565:geom_vline(aes(xintercept = mean(.data[[var]])),
1743842825565:color = "darkgreen", linetype = "dashed") +
1743842825565:annotate("text", x = Inf, y = Inf,
1743842825565:label = paste("Skewness:", skew_val),
1743842825565:hjust = 1.2, vjust = 1.2, size = 4) +
1743842825565:ggtitle(paste("Transformed", var)) +
1743842825565:theme_minimal()
1743842825565:})
1743842825597:# display plots
1743842825597:ggsave(
1743842825597:"log_transformation.png",
1743842825597:arrangeGrob(grobs = combined_plots, ncol = 3, nrow = 2),
1743842825597:width = 14, height = 8
1743842825597:)
1743842826600:# === MISSING VALUE HANDLING ====
1743842826601:# check missing
1743842826601:sum(is.na(winequality))
1743842826601:# introduce missing value
1743842826601:set.seed(123)
1743842826601:winequality_missing <- winequality
1743842826602:predictor_vars <- setdiff(names(winequality_missing), "quality")
1743842826602:for (col in predictor_vars) {
1743842826602:if (is.numeric(winequality_missing[[col]])) {
1743842826602:winequality_missing[[col]][sample(1:nrow(winequality_missing), 1000)] <- NA
1743842826602:}
1743842826602:}
1743842826608:# missing report
1743842826609:missing_report <- data.frame(
1743842826609:Variable = names(winequality_missing),
1743842826609:Missing = sapply(winequality_missing, function(x) sum(is.na(x))),
1743842826609:Percent = round(sapply(winequality_missing, function(x) mean(is.na(x)))*100, 2)
1743842826609:)
1743842826613:print("Missing Value Report:")
1743842826613:print(missing_report)
1743842826616:# mean imputation
1743842826616:method1 <- mice(
1743842826616:winequality_missing,
1743842826616:method = "mean",  # Correct method name for mean imputation
1743842826616:m = 1,
1743842826617:maxit = 1,
1743842826617:printFlag = FALSE
1743842826617:)
1743842826706:winequality_mean <- complete(method1)
1743842826709:# KNN imputation
1743842826709:method2 <- mice(
1743842826709:winequality_missing,
1743842826709:method = "pmm",
1743842826709:m = 1,
1743842826709:maxit = 1,
1743842826709:printFlag = FALSE
1743842826709:)
1743842826842:winequality_knn <- complete(method2)
1743842826846:# compare imputation
1743842826846:compare_imputation <- function(original, method1, method2, var) {
1743842826846:# Original distribution
1743842826846:p1 <- ggplot(data.frame(value = original[[var]]), aes(x = value)) +
1743842826846:geom_density(color = "blue", fill = "blue", alpha = 0.3) +
1743842826846:ggtitle("Original Distribution")
1743842826846:# mean imputation
1743842826846:p2 <- ggplot(data.frame(value = method1[[var]]), aes(x = value)) +
1743842826847:geom_density(color = "red", fill = "red", alpha = 0.3) +
1743842826847:ggtitle("Mean Imputation")
1743842826847:# KNN imputation
1743842826847:p3 <- ggplot(data.frame(value = method2[[var]]), aes(x = value)) +
1743842826847:geom_density(color = "green", fill = "green", alpha = 0.3) +
1743842826847:ggtitle("K-NN Imputation")
1743842826848:grid.arrange(p1, p2, p3, ncol = 3)
1743842826848:}
1743842826848:compare_imputation(winequality, winequality_mean, winequality_knn, "residual.sugar")
1743842895091:compare_boxplots <- function(original, method1, method2, var) {
1743842895091:# Combine data
1743842895092:combined <- data.frame(
1743842895092:Value = c(original[[var]], method1[[var]], method2[[var]]),
1743842895092:Method = rep(c("Original", "Mean", "K-NN"), each = nrow(original))
1743842895093:)
1743842895093:# Create boxplot
1743842895093:ggplot(combined, aes(x = Method, y = Value, fill = Method)) +
1743842895094:geom_boxplot() +
1743842895094:ggtitle(paste("Comparison for", var)) +
1743842895094:theme_minimal()
1743842895094:}
1743842895095:# Usage
1743842895095:compare_boxplots(winequality, winequality_mean, winequality_knn, "residual.sugar")
1743842903594:compare_scatter <- function(original, method1, method2, var) {
1743842903594:# Create data frame
1743842903595:df <- data.frame(
1743842903595:Original = original[[var]],
1743842903595:Mean = method1[[var]],
1743842903595:KNN = method2[[var]]
1743842903595:)
1743842903596:# Create scatterplot matrix
1743842903596:ggpairs(df,
1743842903596:lower = list(continuous = wrap("points", alpha = 0.3)),
1743842903596:diag = list(continuous = wrap("densityDiag")),
1743842903596:upper = list(continuous = wrap("cor", size = 3))) +
1743842903596:ggtitle(paste("Scatterplot Matrix for", var))
1743842903597:}
1743842903597:# Usage
1743842903597:compare_scatter(winequality, winequality_mean, winequality_knn, "residual.sugar")
1743842916594:compare_violin <- function(original, method1, method2, var) {
1743842916594:# Create data frame
1743842916594:df <- data.frame(
1743842916595:Value = c(original[[var]], method1[[var]], method2[[var]]),
1743842916595:Type = c(rep("Original", nrow(original)),
1743842916595:rep("Imputed", nrow(method1)*2)),
1743842916595:Method = c(rep("Original", nrow(original)),
1743842916595:rep("Mean", nrow(method1)),
1743842916595:rep("K-NN", nrow(method2)))
1743842916596:)
1743842916596:# Create violin plot
1743842916596:ggplot(df, aes(x = Method, y = Value, fill = Type)) +
1743842916596:geom_violin(alpha = 0.5, trim = FALSE) +
1743842916597:geom_jitter(aes(color = Type), width = 0.2, alpha = 0.3) +
1743842916597:ggtitle(paste("Distribution Comparison for", var)) +
1743842916597:theme_minimal()
1743842916597:}
1743842916597:# Usage
1743842916597:compare_violin(winequality, winequality_mean, winequality_knn, "residual.sugar")
1743843008920:compare_violin(winequality, winequality_mean, winequality_knn, "residual.sugar")
1743843009674:dev.off()
1743843019910:png("missing_handling.png", width = 1200, height = 800, res = 150)
1743843019910:compare_violin(winequality, winequality_mean, winequality_knn, "residual.sugar")
1743843020425:dev.off()
1743844101229:# compare imputation
1743844101230:compare_imputation <- function(original, method1, method2, var) {
1743844101230:# Original distribution
1743844101230:p1 <- ggplot(data.frame(value = original[[var]]), aes(x = value)) +
1743844101230:geom_density(color = "blue", fill = "blue", alpha = 0.3) +
1743844101231:ggtitle("Original Distribution")
1743844101231:# mean imputation
1743844101231:p2 <- ggplot(data.frame(value = method1[[var]]), aes(x = value)) +
1743844101232:geom_density(color = "red", fill = "red", alpha = 0.3) +
1743844101232:ggtitle("Mean Imputation")
1743844101232:# KNN imputation
1743844101232:p3 <- ggplot(data.frame(value = method2[[var]]), aes(x = value)) +
1743844101232:geom_density(color = "green", fill = "green", alpha = 0.3) +
1743844101233:ggtitle("K-NN Imputation")
1743844101233:grid.arrange(p1, p2, p3, ncol = 3)
1743844101233:}
1743844101234:png("missing_handling_1.png", width = 1200, height = 800, res = 150)
1743844101235:compare_imputation(winequality, winequality_mean, winequality_knn, "residual.sugar")
1743844101709:dev.off()
1743844101751:compare_violin <- function(original, method1, method2, var) {
1743844101751:df <- data.frame(
1743844101751:Value = c(original[[var]], method1[[var]], method2[[var]]),
1743844101751:Type = c(rep("Original", nrow(original)),
1743844101751:rep("Imputed", nrow(method1)*2)),
1743844101751:Method = c(rep("Original", nrow(original)),
1743844101752:rep("Mean", nrow(method1)),
1743844101752:rep("K-NN", nrow(method2)))
1743844101752:)
1743844101752:ggplot(df, aes(x = Method, y = Value, fill = Type)) +
1743844101752:geom_violin(alpha = 0.5, trim = FALSE) +
1743844101753:geom_jitter(aes(color = Type), width = 0.2, alpha = 0.3) +
1743844101753:ggtitle(paste("Distribution Comparison for", var)) +
1743844101753:theme_minimal()
1743844101753:}
1743844101753:png("missing_handling.png_2", width = 1200, height = 800, res = 150)
1743844101754:compare_violin(winequality, winequality_mean, winequality_knn, "residual.sugar")
1743844102391:dev.off()
1743844130883:compare_violin <- function(original, method1, method2, var) {
1743844130884:df <- data.frame(
1743844130884:Value = c(original[[var]], method1[[var]], method2[[var]]),
1743844130885:Type = c(rep("Original", nrow(original)),
1743844130885:rep("Imputed", nrow(method1)*2)),
1743844130885:Method = c(rep("Original", nrow(original)),
1743844130885:rep("Mean", nrow(method1)),
1743844130885:rep("K-NN", nrow(method2)))
1743844130885:)
1743844130885:ggplot(df, aes(x = Method, y = Value, fill = Type)) +
1743844130885:geom_violin(alpha = 0.5, trim = FALSE) +
1743844130886:geom_jitter(aes(color = Type), width = 0.2, alpha = 0.3) +
1743844130886:ggtitle(paste("Distribution Comparison for", var)) +
1743844130886:theme_minimal()
1743844130886:}
1743844130887:png("missing_handling_2.png", width = 1200, height = 800, res = 150)
1743844130888:compare_violin(winequality, winequality_mean, winequality_knn, "residual.sugar")
1743844131427:dev.off()
1743845364199:results <- data.frame()
1743845385167:# === TRAIN-TEST SPLIT, MIN-MAX SCALING ===
1743845385167:data <- winequality_knn
1743845385168:split_ratios <- list(
1743845385168:"70-30" = 0.7,
1743845385168:"80-20" = 0.8,
1743845385168:"90-10" = 0.9
1743845385168:)
1743845385169:results <- data.frame()
1743845385169:for (ratio in split_ratios) {
1743845385169:# Split data
1743845385169:trainIndex <- createDataPartition(data$quality, p = ratio, list = FALSE)
1743845385169:train_data <- data[trainIndex, ]
1743845385169:test_data <- data[-trainIndex, ]
1743845385170:# Scale features (Min-Max)
1743845385170:preproc <- preProcess(train_data[, -which(names(train_data) == "quality")], method = "range")
1743845385170:train_scaled <- predict(preproc, train_data)
1743845385170:test_scaled <- predict(preproc, test_data)
1743845385170:# Train Random Forest model
1743845385170:model <- randomForest(
1743845385171:x = train_scaled[, -which(names(train_scaled) == "quality")],
1743845385171:y = train_scaled$quality,
1743845385171:ntree = 100,
1743845385171:importance = TRUE
1743845385171:)
1743845385171:# Predict and evaluate
1743845385171:predictions <- predict(model, test_scaled[, -which(names(test_scaled) == "quality")])
1743845385172:# Calculate metrics
1743845385172:rmse <- sqrt(mean((predictions - test_data$quality)^2))
1743845385172:mae <- mean(abs(predictions - test_data$quality))
1743845385172:r_squared <- cor(predictions, test_data$quality)^2
1743845385173:# Store results
1743845385173:results <- rbind(results, data.frame(
1743845385173:Split = names(ratio),
1743845385173:RMSE = round(rmse, 2),
1743845385173:MAE = round(mae, 2),
1743845385174:R_Squared = round(r_squared, 2),
1743845385174:Train_Size = nrow(train_data),
1743845385174:Test_Size = nrow(test_data)
1743845385174:))
1743845385174:}
1743845412844:install.packages("randomForest")
1743845417996:install.packages("caret")
1743845498458:install.packages("randomForest")
1743845500431:library(caret)
1743845501042:library(randomForest)
1743845548051:data <- winequality_knn
1743845548052:split_ratios <- list(
1743845548052:"70-30" = 0.7,
1743845548052:"80-20" = 0.8,
1743845548052:"90-10" = 0.9
1743845548052:)
1743845548052:results <- data.frame()
1743845548053:for (ratio in split_ratios) {
1743845548053:# split data
1743845548053:trainIndex <- createDataPartition(data$quality, p = ratio, list = FALSE)
1743845548053:train_data <- data[trainIndex, ]
1743845548053:test_data <- data[-trainIndex, ]
1743845548053:# min-max scaling
1743845548053:preproc <- preProcess(train_data[, -which(names(train_data) == "quality")], method = "range")
1743845548053:train_scaled <- predict(preproc, train_data)
1743845548053:test_scaled <- predict(preproc, test_data)
1743845548054:# modeling
1743845548054:model <- randomForest(
1743845548054:x = train_scaled[, -which(names(train_scaled) == "quality")],
1743845548054:y = train_scaled$quality,
1743845548054:ntree = 100,
1743845548054:importance = TRUE
1743845548054:)
1743845548055:# predict and evaluate
1743845548055:predictions <- predict(model, test_scaled[, -which(names(test_scaled) == "quality")])
1743845548055:# metrics
1743845548055:rmse <- sqrt(mean((predictions - test_data$quality)^2))
1743845548055:mae <- mean(abs(predictions - test_data$quality))
1743845548056:r_squared <- cor(predictions, test_data$quality)^2
1743845548056:results <- rbind(results, data.frame(
1743845548056:Split = names(ratio),
1743845548056:RMSE = round(rmse, 2),
1743845548057:MAE = round(mae, 2),
1743845548057:R_Squared = round(r_squared, 2),
1743845548057:Train_Size = nrow(train_data),
1743845548057:Test_Size = nrow(test_data)
1743845548057:))
1743845548057:}
1743845623155:for (ratio in split_ratios) {
1743845623155:ratio <- split_ratios[[split_name]]
1743845623156:# split data
1743845623156:trainIndex <- createDataPartition(data$quality, p = ratio, list = FALSE)
1743845623156:train_data <- data[trainIndex, ]
1743845623156:test_data <- data[-trainIndex, ]
1743845623156:# min-max scaling
1743845623156:preproc <- preProcess(train_data[, -which(names(train_data) == "quality")], method = "range")
1743845623157:train_scaled <- predict(preproc, train_data)
1743845623157:test_scaled <- predict(preproc, test_data)
1743845623157:# modeling
1743845623157:model <- randomForest(
1743845623157:x = train_scaled[, -which(names(train_scaled) == "quality")],
1743845623158:y = train_scaled$quality,
1743845623158:ntree = 100,
1743845623159:importance = TRUE
1743845623159:)
1743845623160:# predict and evaluate
1743845623160:predictions <- predict(model, test_scaled[, -which(names(test_scaled) == "quality")])
1743845623160:# metrics
1743845623160:rmse <- sqrt(mean((predictions - test_data$quality)^2))
1743845623160:mae <- mean(abs(predictions - test_data$quality))
1743845623161:r_squared <- cor(predictions, test_data$quality)^2
1743845623161:results <- rbind(results, data.frame(
1743845623161:Split = names(ratio),
1743845623161:RMSE = round(rmse, 2),
1743845623161:MAE = round(mae, 2),
1743845623161:R_Squared = round(r_squared, 2),
1743845623162:Train_Size = nrow(train_data),
1743845623162:Test_Size = nrow(test_data)
1743845623162:))
1743845623162:}
1743845631797:for (split_name in split_ratios) {
1743845631798:ratio <- split_ratios[[split_name]]
1743845631798:# split data
1743845631798:trainIndex <- createDataPartition(data$quality, p = ratio, list = FALSE)
1743845631798:train_data <- data[trainIndex, ]
1743845631799:test_data <- data[-trainIndex, ]
1743845631799:# min-max scaling
1743845631799:preproc <- preProcess(train_data[, -which(names(train_data) == "quality")], method = "range")
1743845631799:train_scaled <- predict(preproc, train_data)
1743845631800:test_scaled <- predict(preproc, test_data)
1743845631800:# modeling
1743845631800:model <- randomForest(
1743845631800:x = train_scaled[, -which(names(train_scaled) == "quality")],
1743845631800:y = train_scaled$quality,
1743845631801:ntree = 100,
1743845631801:importance = TRUE
1743845631801:)
1743845631801:# predict and evaluate
1743845631801:predictions <- predict(model, test_scaled[, -which(names(test_scaled) == "quality")])
1743845631802:# metrics
1743845631802:rmse <- sqrt(mean((predictions - test_data$quality)^2))
1743845631802:mae <- mean(abs(predictions - test_data$quality))
1743845631802:r_squared <- cor(predictions, test_data$quality)^2
1743845631803:results <- rbind(results, data.frame(
1743845631803:Split = names(ratio),
1743845631803:RMSE = round(rmse, 2),
1743845631803:MAE = round(mae, 2),
1743845631804:R_Squared = round(r_squared, 2),
1743845631804:Train_Size = nrow(train_data),
1743845631804:Test_Size = nrow(test_data)
1743845631804:))
1743845631804:}
1743845702731:for (split_name in names(split_ratios)) {
1743845702731:ratio <- split_ratios[[split_name]]
1743845702731:# Split data
1743845702731:trainIndex <- createDataPartition(data$quality, p = ratio, list = FALSE)
1743845702732:train_data <- data[trainIndex, ]
1743845702732:test_data <- data[-trainIndex, ]
1743845702732:# Scale features (Min-Max)
1743845702733:preproc <- preProcess(train_data[, -which(names(train_data) == "quality")], method = "range")
1743845702733:train_scaled <- predict(preproc, train_data)
1743845702733:test_scaled <- predict(preproc, test_data)
1743845702733:# Train Random Forest model
1743845702733:model <- randomForest(
1743845702733:x = train_scaled[, -which(names(train_scaled) == "quality")],
1743845702734:y = train_scaled$quality,
1743845702738:ntree = 100,
1743845702738:importance = TRUE
1743845702738:)
1743845702739:# Predict and evaluate
1743845702739:predictions <- predict(model, test_scaled[, -which(names(test_scaled) == "quality")])
1743845702739:# Calculate metrics
1743845702739:rmse <- sqrt(mean((predictions - test_data$quality)^2))
1743845702740:mae <- mean(abs(predictions - test_data$quality))
1743845702740:r_squared <- cor(predictions, test_data$quality)^2
1743845702740:# Store results
1743845702740:results <- rbind(results, data.frame(
1743845702740:Split = split_name,  # Use split_name directly
1743845702741:RMSE = round(rmse, 2),
1743845702741:MAE = round(mae, 2),
1743845702741:R_Squared = round(r_squared, 2),
1743845702741:Train_Size = nrow(train_data),
1743845702741:Test_Size = nrow(test_data)
1743845702741:))
1743845702742:}
1743845972371:print("Model Performance Across Splits:")
1743845972372:print(results)
1743845989482:ggplot(results, aes(x = Split, y = RMSE, fill = Split)) +
1743845989482:geom_bar(stat = "identity") +
1743845989483:geom_text(aes(label = RMSE), vjust = -0.5) +
1743845989483:labs(title = "Model Performance Comparison (RMSE)",
1743845989483:y = "Root Mean Squared Error",
1743845989483:x = "Train-Test Split Ratio") +
1743845989484:theme_minimal()
1743846855119:print("Model Performance Across Splits:")
1743846855120:print(results)
1743846855124:ggplot(results, aes(x = Split, y = RMSE, fill = Split)) +
1743846855124:geom_bar(stat = "identity") +
1743846855125:geom_text(aes(label = RMSE), vjust = -0.5) +
1743846855125:labs(title = "Model Performance Comparison (RMSE)",
1743846855125:y = "Root Mean Squared Error",
1743846855125:x = "Train-Test Split Ratio") +
1743846855125:theme_minimal()
1743846895442:png("RMSE.png", width = 1200, height = 800, res = 150)
1743846895444:ggplot(results, aes(x = Split, y = RMSE, fill = Split)) +
1743846895444:geom_bar(stat = "identity") +
1743846895444:geom_text(aes(label = RMSE), vjust = -0.5) +
1743846895444:labs(title = "Model Performance Comparison (RMSE)",
1743846895444:y = "Root Mean Squared Error",
1743846895444:x = "Train-Test Split Ratio") +
1743846895445:theme_minimal()
1743846895578:dev.off()
1743847008733:var <- "residual.sugar"
1743847008733:# Create comparison data frame
1743847008734:comparison_df <- data.frame(
1743847008734:Original = train_data[[var]],
1743847008734:Scaled = train_scaled[[var]],
1743847008735:Type = rep(c("Original", "Scaled"), each = nrow(train_data))
1743847008735:)
1743847008736:# Density plot comparison
1743847008736:p1 <- ggplot(comparison_df, aes(x = value, color = Type)) +
1743847008736:geom_density(aes(x = Original), fill = "lightblue", alpha = 0.3) +
1743847008736:geom_density(aes(x = Scaled), fill = "lightgreen", alpha = 0.3) +
1743847008737:geom_vline(xintercept = c(min(train_data[[var]]), max(train_data[[var]])),
1743847008737:linetype = "dashed", color = "blue") +
1743847008737:geom_vline(xintercept = c(0, 1), linetype = "dashed", color = "green") +
1743847008737:labs(title = paste("Min-Max Scaling Effect on", var),
1743847008737:x = var,
1743847008737:subtitle = "Blue lines: Original min/max | Green lines: Scaled [0,1]") +
1743847008738:theme_minimal()
1743847008784:# Histogram comparison
1743847008784:p2 <- ggplot(comparison_df, aes(x = value, fill = Type)) +
1743847008784:geom_histogram(aes(x = Original), bins = 30, alpha = 0.5, position = "identity") +
1743847008784:geom_histogram(aes(x = Scaled), bins = 30, alpha = 0.5, position = "identity") +
1743847008784:scale_fill_manual(values = c("Original" = "blue", "Scaled" = "green")) +
1743847008784:labs(title = paste("Histogram Comparison for", var),
1743847008784:x = var) +
1743847008784:theme_minimal()
1743847008799:# Show combined visualization
1743847008799:grid.arrange(p1, p2, ncol = 2)
1743847097148:visualize_scaling <- function(var) {
1743847097148:df <- data.frame(
1743847097149:Original = train_data[[var]],
1743847097149:Scaled = train_scaled[[var]],
1743847097149:Type = rep(c("Original", "Scaled"), each = nrow(train_data))
1743847097149:)
1743847097149:# Density plot
1743847097149:p1 <- ggplot(df, aes(x = value, color = Type)) +
1743847097149:geom_density(aes(x = Original), fill = "lightblue", alpha = 0.3) +
1743847097150:geom_density(aes(x = Scaled), fill = "lightgreen", alpha = 0.3) +
1743847097150:geom_vline(xintercept = c(min(train_data[[var]]), max(train_data[[var]])),
1743847097150:linetype = "dashed", color = "blue") +
1743847097150:geom_vline(xintercept = c(0, 1), linetype = "dashed", color = "green") +
1743847097151:ggtitle(paste("Scaling Effect:", var)) +
1743847097151:theme_minimal()
1743847097151:# Histogram
1743847097151:p2 <- ggplot(df, aes(x = value, fill = Type)) +
1743847097152:geom_histogram(aes(x = Original), bins = 30, alpha = 0.5) +
1743847097152:geom_histogram(aes(x = Scaled), bins = 30, alpha = 0.5) +
1743847097152:scale_fill_manual(values = c("Original" = "blue", "Scaled" = "green")) +
1743847097152:ggtitle(paste("Histogram for", var)) +
1743847097152:theme_minimal()
1743847097153:grid.arrange(p1, p2, ncol = 2)
1743847097153:}
1743847097154:# Visualize all numeric features
1743847097154:numeric_vars <- setdiff(names(train_data), "quality")
1743847097154:lapply(numeric_vars, visualize_scaling)
1743847155993:visualize_scaling <- function(var) {
1743847155993:df <- data.frame(
1743847155993:Original = train_data[[var]],
1743847155994:Scaled = train_scaled[[var]],
1743847155994:Type = rep(c("Original", "Scaled"), each = nrow(train_data))
1743847155994:)
1743847155994:# Density plot
1743847155995:p1 <- ggplot(df, aes(x = value, color = Type)) +
1743847155995:geom_density(aes(x = Original), fill = "lightblue", alpha = 0.3) +
1743847155995:geom_density(aes(x = Scaled), fill = "lightgreen", alpha = 0.3) +
1743847155995:geom_vline(xintercept = c(min(train_data[[var]]), max(train_data[[var]])),
1743847155995:linetype = "dashed", color = "blue") +
1743847155995:geom_vline(xintercept = c(0, 1), linetype = "dashed", color = "green") +
1743847155996:ggtitle(paste("Scaling Effect:", var)) +
1743847155996:theme_minimal()
1743847155996:# Histogram
1743847155996:p2 <- ggplot(df, aes(x = value, fill = Type)) +
1743847155996:geom_histogram(aes(x = Original), bins = 30, alpha = 0.5) +
1743847155997:geom_histogram(aes(x = Scaled), bins = 30, alpha = 0.5) +
1743847155997:scale_fill_manual(values = c("Original" = "blue", "Scaled" = "green")) +
1743847155998:ggtitle(paste("Histogram for", var)) +
1743847155998:theme_minimal()
1743847155998:grid.arrange(p1, p2, ncol = 2)
1743847155998:}
1743847155999:# Visualize all numeric features
1743847155999:numeric_vars <- setdiff(names(train_data), "quality")
1743847156000:lapply(numeric_vars, visualize_scaling)
1743847193959:key_vars <- c("alcohol", "pH", "residual.sugar", "quality")
1743847193960:# Original data
1743847193960:original_ggpairs <- ggpairs(train_data[, key_vars],
1743847193960:title = "Original Data Relationships",
1743847193960:upper = list(continuous = wrap("cor", size = 3)),
1743847193960:diag = list(continuous = wrap("densityDiag")),
1743847193960:lower = list(continuous = wrap("points", alpha = 0.3)))
1743847210536:library(GGally)
1743847218860:install.packages("GGally")
1743847243619:library(GGally)
1743847243689:library(plotly)
1743847269812:# library
1743847269813:# install.packages("dplyr")
1743847269813:# install.packages("e1071")
1743847269813:# install.packages("gridExtra")
1743847269814:# install.packages("ggplot2")
1743847269814:# install.packages("VIM")
1743847269814:# install.packages("mice")
1743847269814:# install.packages("caret")
1743847269814:# install.packages("randomForest")
1743847269814:# install.packages("GGally")
1743847269815:install.packages("plotly")
1743847329818:library(plotly)
1743847334240:key_vars <- c("alcohol", "pH", "residual.sugar", "quality")
1743847334241:# Original data
1743847334241:original_ggpairs <- ggpairs(train_data[, key_vars],
1743847334241:title = "Original Data Relationships",
1743847334241:upper = list(continuous = wrap("cor", size = 3)),
1743847334242:diag = list(continuous = wrap("densityDiag")),
1743847334242:lower = list(continuous = wrap("points", alpha = 0.3)))
1743847334265:# Scaled data
1743847334266:scaled_ggpairs <- ggpairs(train_scaled[, key_vars],
1743847334266:title = "Scaled Data Relationships",
1743847334266:upper = list(continuous = wrap("cor", size = 3)),
1743847334266:diag = list(continuous = wrap("densityDiag")),
1743847334266:lower = list(continuous = wrap("points", alpha = 0.3)))
1743847334284:grid.arrange(original_ggpairs, scaled_ggpairs, ncol = 2)
1743847351335:train_parallel <- train_data %>%
1743847351336:select(all_of(key_vars)) %>%
1743847351336:mutate(Type = "Original") %>%
1743847351336:bind_rows(
1743847351336:train_scaled %>%
1743847351337:select(all_of(key_vars)) %>%
1743847351337:mutate(Type = "Scaled")
1743847351337:)
1743847351349:# Plot
1743847351349:ggparcoord(train_parallel,
1743847351349:columns = 1:4,
1743847351350:groupColumn = 5,
1743847351350:scale = "uniminmax",  # Preserve 0-1 scale for scaled data
1743847351350:title = "Feature Relationships Before/After Scaling") +
1743847351350:theme_minimal()
1743847396701:var <- "residual.sugar"
1743847396702:# Create comparison data frame
1743847396702:comparison_df <- data.frame(
1743847396702:Original = train_data[[var]],
1743847396702:Scaled = train_scaled[[var]],
1743847396702:Type = rep(c("Original", "Scaled"), each = nrow(train_data))
1743847396703:)
1743847396705:# Density plot comparison
1743847396705:p1 <- ggplot(comparison_df, aes(x = value, color = Type)) +
1743847396705:geom_density(aes(x = Original), fill = "lightblue", alpha = 0.3) +
1743847396705:geom_density(aes(x = Scaled), fill = "lightgreen", alpha = 0.3) +
1743847396706:geom_vline(xintercept = c(min(train_data[[var]]), max(train_data[[var]])),
1743847396706:linetype = "dashed", color = "blue") +
1743847396706:geom_vline(xintercept = c(0, 1), linetype = "dashed", color = "green") +
1743847396706:labs(title = paste("Min-Max Scaling Effect on", var),
1743847396707:x = var,
1743847396707:subtitle = "Blue lines: Original min/max | Green lines: Scaled [0,1]") +
1743847396707:theme_minimal()
1743847396741:# Histogram comparison
1743847396742:p2 <- ggplot(comparison_df, aes(x = value, fill = Type)) +
1743847396742:geom_histogram(aes(x = Original), bins = 30, alpha = 0.5, position = "identity") +
1743847396742:geom_histogram(aes(x = Scaled), bins = 30, alpha = 0.5, position = "identity") +
1743847396742:scale_fill_manual(values = c("Original" = "blue", "Scaled" = "green")) +
1743847396742:labs(title = paste("Histogram Comparison for", var),
1743847396742:x = var) +
1743847396742:theme_minimal()
1743847396799:# Show combined visualization
1743847396800:grid.arrange(p1, p2, ncol = 2)
1743847602504:comparison_df <- data.frame(
1743847602504:Original = train_data$residual.sugar,
1743847602505:Scaled = train_scaled$residual.sugar
1743847602505:) %>%
1743847602505:pivot_longer(cols = everything(), names_to = "Type", values_to = "Value")
1743847637896:library(tidyr)
1743847637936:library(dplyr)
1743847642333:comparison_df <- data.frame(
1743847642334:Original = train_data$residual.sugar,
1743847642334:Scaled = train_scaled$residual.sugar
1743847642334:) %>%
1743847642334:pivot_longer(cols = everything(), names_to = "Type", values_to = "Value")
1743847642347:# Create summary statistics
1743847642347:summary_df <- comparison_df %>%
1743847642347:group_by(Type) %>%
1743847642347:summarise(Min = min(Value), Max = max(Value))
1743847642365:# Single combined plot with clear contrast
1743847642365:ggplot(comparison_df, aes(x = Value, fill = Type)) +
1743847642365:# Original distribution
1743847642365:geom_histogram(data = . %>% filter(Type == "Original"),
1743847642365:bins = 30, alpha = 0.5, position = "identity") +
1743847642366:geom_vline(data = summary_df %>% filter(Type == "Original"),
1743847642366:aes(xintercept = Min), color = "blue", linetype = "dashed") +
1743847642366:geom_vline(data = summary_df %>% filter(Type == "Original"),
1743847642366:aes(xintercept = Max), color = "blue", linetype = "dashed") +
1743847642367:# Scaled distribution
1743847642367:geom_histogram(data = . %>% filter(Type == "Scaled"),
1743847642367:bins = 30, alpha = 0.5, position = "identity") +
1743847642367:geom_vline(data = summary_df %>% filter(Type == "Scaled"),
1743847642367:aes(xintercept = Min), color = "green", linetype = "dashed") +
1743847642368:geom_vline(data = summary_df %>% filter(Type == "Scaled"),
1743847642368:aes(xintercept = Max), color = "green", linetype = "dashed") +
1743847642368:# Customizations
1743847642368:scale_fill_manual(values = c("Original" = "lightblue", "Scaled" = "lightgreen")) +
1743847642369:labs(title = "Min-Max Scaling Effect on Residual Sugar",
1743847642369:subtitle = "Blue lines: Original range | Green lines: Scaled [0,1]",
1743847642369:x = "Residual Sugar") +
1743847642369:theme_minimal()
1743847857128:library(tidyverse)
1743847867362:install.packages("tidyverse")
1743847932191:library(tidyverse)
1743847944034:# === VISUALIZE MIN-MAX SCALE ===
1743847944034:comparison_all <- predictor_vars %>%
1743847944034:map_dfr(~{
1743847944035:tibble(
1743847944035:Feature = .x,
1743847944035:Original = train_data[[.x]],
1743847944035:Scaled = train_scaled[[.x]]
1743847944035:) %>%
1743847944036:pivot_longer(cols = c(Original, Scaled),
1743847944036:names_to = "Type",
1743847944036:values_to = "Value")
1743847944036:})
1743847944102:# Create summary statistics
1743847944102:summary_all <- comparison_all %>%
1743847944102:group_by(Feature, Type) %>%
1743847944102:summarise(Min = min(Value),
1743847944102:Max = max(Value),
1743847944103:.groups = 'drop')
1743847944111:# Create faceted visualization
1743847944111:ggplot(comparison_all, aes(x = Value, fill = Type)) +
1743847944111:geom_histogram(bins = 30, alpha = 0.5, position = "identity") +
1743847944112:# Add min/max lines
1743847944112:geom_vline(data = summary_all,
1743847944112:aes(xintercept = Min, color = Type),
1743847944112:linetype = "dashed") +
1743847944112:geom_vline(data = summary_all,
1743847944113:aes(xintercept = Max, color = Type),
1743847944113:linetype = "dashed") +
1743847944113:# Facet setup
1743847944113:facet_wrap(~ Feature, scales = "free") +
1743847944114:# Customization
1743847944114:scale_fill_manual(values = c("Original" = "lightblue", "Scaled" = "lightgreen")) +
1743847944114:scale_color_manual(values = c("Original" = "blue", "Scaled" = "green")) +
1743847944114:labs(title = "Min-Max Scaling Effects Across All Features",
1743847944114:subtitle = "Blue: Original | Green: Scaled [0,1]",
1743847944115:x = "Value",
1743847944115:y = "Count") +
1743847944115:theme_minimal() +
1743847944115:theme(legend.position = "bottom",
1743847944115:axis.text.x = element_text(angle = 45, hjust = 1))
1743848046396:comparison_all <- predictor_vars %>%
1743848046397:map_dfr(~{
1743848046397:tibble(
1743848046397:Feature = .x,
1743848046397:Original = train_data[[.x]],
1743848046398:Scaled = train_scaled[[.x]]
1743848046398:) %>%
1743848046398:pivot_longer(cols = c(Original, Scaled),
1743848046398:names_to = "Type",
1743848046398:values_to = "Value")
1743848046399:})
1743848046484:# Create summary statistics
1743848046484:summary_all <- comparison_all %>%
1743848046485:group_by(Feature, Type) %>%
1743848046485:summarise(Min = min(Value),
1743848046485:Max = max(Value),
1743848046485:.groups = 'drop')
1743848046495:# Create faceted visualization
1743848046495:ggplot(comparison_all, aes(x = Value, fill = Type)) +
1743848046495:geom_histogram(bins = 30, alpha = 0.5, position = "identity") +
1743848046496:# Add min/max lines
1743848046496:geom_vline(data = summary_all,
1743848046496:aes(xintercept = Min, color = Type),
1743848046496:linetype = "dashed") +
1743848046496:geom_vline(data = summary_all,
1743848046497:aes(xintercept = Max, color = Type),
1743848046497:linetype = "dashed") +
1743848046497:# Facet setup
1743848046497:facet_wrap(~ Feature, scales = "free", ncol = 2) +
1743848046497:# Customization
1743848046498:scale_fill_manual(values = c("Original" = "lightblue", "Scaled" = "lightgreen")) +
1743848046498:scale_color_manual(values = c("Original" = "blue", "Scaled" = "green")) +
1743848046498:labs(title = "Min-Max Scaling Effects Across All Features",
1743848046498:subtitle = "Blue: Original | Green: Scaled [0,1]",
1743848046498:x = "Value",
1743848046499:y = "Count") +
1743848046499:theme_minimal() +
1743848046499:theme(legend.position = "bottom",
1743848046499:axis.text.x = element_text(angle = 45, hjust = 1))
1743848077158:comparison_all <- predictor_vars %>%
1743848077158:map_dfr(~{
1743848077158:tibble(
1743848077158:Feature = .x,
1743848077159:Original = train_data[[.x]],
1743848077159:Scaled = train_scaled[[.x]]
1743848077159:) %>%
1743848077159:pivot_longer(cols = c(Original, Scaled),
1743848077159:names_to = "Type",
1743848077159:values_to = "Value")
1743848077159:})
1743848077219:# Create summary statistics
1743848077219:summary_all <- comparison_all %>%
1743848077219:group_by(Feature, Type) %>%
1743848077220:summarise(Min = min(Value),
1743848077220:Max = max(Value),
1743848077220:.groups = 'drop')
1743848077228:# Create 2-column faceted visualization
1743848077228:ggplot(comparison_all, aes(x = Value, fill = Type)) +
1743848077228:geom_histogram(bins = 30, alpha = 0.5, position = "identity") +
1743848077228:# Add min/max lines
1743848077229:geom_vline(data = summary_all,
1743848077229:aes(xintercept = Min, color = Type),
1743848077229:linetype = "dashed") +
1743848077229:geom_vline(data = summary_all,
1743848077229:aes(xintercept = Max, color = Type),
1743848077229:linetype = "dashed") +
1743848077230:# Facet setup with 2 columns
1743848077230:facet_wrap(~ Feature, scales = "free", ncol = 2) +
1743848077230:# Customization
1743848077230:scale_fill_manual(values = c("Original" = "lightblue", "Scaled" = "lightgreen")) +
1743848077231:scale_color_manual(values = c("Original" = "blue", "Scaled" = "green")) +
1743848077231:labs(title = "Min-Max Scaling Effects Across All Features",
1743848077231:subtitle = "Blue: Original | Green: Scaled [0,1]",
1743848077231:x = "Value",
1743848077231:y = "Count") +
1743848077232:theme_minimal() +
1743848077232:theme(legend.position = "bottom",
1743848077232:axis.text.x = element_text(angle = 45, hjust = 1),
1743848077232:strip.background = element_rect(fill = "lightgray"))
1743848141622:n_features <- length(predictor_vars)
1743848141623:n_rows <- ceiling(n_features / 2)
1743848141623:height <- max(8, n_rows * 2.5)  # Minimum 8" height, 2.5" per row
1743848141624:# Create enhanced visualization
1743848141624:ggplot(comparison_all, aes(x = Value, fill = Type)) +
1743848141624:geom_histogram(bins = 30, alpha = 0.5, position = "identity") +
1743848141625:# Add min/max lines
1743848141625:geom_vline(data = summary_all,
1743848141625:aes(xintercept = Min, color = Type),
1743848141625:linetype = "dashed") +
1743848141625:geom_vline(data = summary_all,
1743848141626:aes(xintercept = Max, color = Type),
1743848141626:linetype = "dashed") +
1743848141626:# Facet setup with improved spacing
1743848141626:facet_wrap(~ Feature,
1743848141626:scales = "free",
1743848141627:ncol = 2,
1743848141627:labeller = label_wrap_gen(width = 25)) +  # Wrap long feature names
1743848141627:# Customization
1743848141627:scale_fill_manual(values = c("Original" = "lightblue", "Scaled" = "lightgreen")) +
1743848141628:scale_color_manual(values = c("Original" = "blue", "Scaled" = "green")) +
1743848141628:labs(title = "Min-Max Scaling Effects Across All Features",
1743848141628:subtitle = "Blue: Original | Green: Scaled [0,1]",
1743848141629:x = "Value",
1743848141629:y = "Count") +
1743848141629:theme_minimal() +
1743848141630:theme(
1743848141630:legend.position = "bottom",
1743848141630:axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
1743848141631:strip.text = element_text(size = 9, face = "bold"),
1743848141631:panel.spacing = unit(1.5, "lines"),  # Increased spacing between panels
1743848141633:plot.title = element_text(size = 14),
1743848141634:plot.subtitle = element_text(size = 11)
1743848141635:)
1743848142523:# Save with appropriate dimensions
1743848142523:ggsave("min_max_scaling.png",
1743848142523:width = 16,
1743848142523:height = height,
1743848142524:units = "in",
1743848142524:dpi = 300)
1743848504443:# library
1743848504443:# install.packages("dplyr")
1743848504443:# install.packages("e1071")
1743848504443:# install.packages("gridExtra")
1743848504444:# install.packages("ggplot2")
1743848504444:# install.packages("VIM")
1743848504444:# install.packages("mice")
1743848504444:# install.packages("caret")
1743848504444:# install.packages("randomForest")
1743848504444:# install.packages("GGally")
1743848504444:# install.packages("plotly")
1743848504444:# install.packages("tidyverse")
1743848504444:library(dplyr)
1743848504445:library(e1071)
1743848504445:library(gridExtra)
1743848504445:library(ggplot2)
1743848504446:library(VIM)
1743848504446:library(mice)
1743848504446:library(caret)
1743848504446:library(randomForest)
1743848504446:library(GGally)
1743848504447:library(plotly)
1743848504447:library(tidyr)
1743848504447:library(dplyr)
1743848504447:library(tidyverse)
1743848504448:# seed
1743848504448:set.seed(123)
1743848504448:# dataset
1743848504448:winequality <- read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv", sep = ";")
1743848505707:tail(winequality, n=3)
1743848505712:# summary
1743848505713:summary(winequality)
1743848505724:# === OUTLIER HANDLING ===
1743848505724:# check outlier
1743848505724:png("outlier_check_before.png", width = 1200, height = 400)
1743848505728:par(mfrow = c(1, 3))
1743848505728:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743848505728:for (var in outlier_vars) {
1743848505728:boxplot(winequality[[var]],
1743848505728:main = paste(var, "Distribution"),
1743848505729:ylab = var)
1743848505729:}
1743848505746:dev.off()
1743848505766:# IQR
1743848505766:detect_outliers <- function(x) {
1743848505766:Q1 <- quantile(x, 0.25, na.rm = TRUE)
1743848505766:Q3 <- quantile(x, 0.75, na.rm = TRUE)
1743848505766:IQR <- Q3 - Q1
1743848505766:lower_bound <- Q1 - 1.5 * IQR
1743848505766:upper_bound <- Q3 + 1.5 * IQR
1743848505766:return(list(lower = lower_bound, upper = upper_bound))
1743848505766:}
1743848505767:# winsorize outliers
1743848505767:winsorize_iqr <- function(x) {
1743848505767:bounds <- detect_outliers(x)
1743848505767:x[x < bounds$lower] <- bounds$lower  # Replace lower outliers with Q1 - 1.5*IQR
1743848505767:x[x > bounds$upper] <- bounds$upper  # Replace upper outliers with Q3 + 1.5*IQR
1743848505767:return(x)
1743848505768:}
1743848505768:winequality <- winequality %>%
1743848505768:mutate(across(all_of(outlier_vars), ~ winsorize_iqr(.x)))
1743848505791:tail(winequality, n=3)
1743848505794:summary(winequality)
1743848505801:# check outlier
1743848505801:png("outlier_check_after.png", width = 1200, height = 400)
1743848505804:par(mfrow = c(1, 3))
1743848505804:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743848505804:for (var in outlier_vars) {
1743848505804:boxplot(winequality[[var]],
1743848505804:main = paste(var, "Distribution"),
1743848505804:ylab = var)
1743848505804:}
1743848505813:dev.off()
1743848505833:# === LOG TRANSFORMATION ===
1743848505833:# calc skewness
1743848505833:numeric_vars <- names(winequality)[sapply(winequality, is.numeric)]
1743848505833:skewness_report <- data.frame(
1743848505833:Variable = numeric_vars,
1743848505833:Skewness = round(sapply(winequality[, numeric_vars], skewness), 2)
1743848505833:)
1743848505836:skewness_report <- skewness_report[order(-abs(skewness_report$Skewness)), ]
1743848505836:print("Skewness Report (Before Transformation):")
1743848505836:print(skewness_report)
1743848505837:high_skew_vars <- skewness_report %>%
1743848505837:filter(Skewness > 1) %>%
1743848505837:pull(Variable)
1743848505839:# check skewness
1743848505839:original_plots <- lapply(high_skew_vars, function(var) {
1743848505839:skew_val <- round(skewness(winequality[[var]]), 2)
1743848505839:ggplot(winequality, aes_string(var)) +
1743848505839:geom_histogram(bins = 30, fill = "lightblue", color = "black") +
1743848505839:geom_vline(aes(xintercept = mean(winequality[[var]])),
1743848505839:color = "red", linetype = "dashed") +
1743848505839:annotate("text", x = Inf, y = Inf,
1743848505839:label = paste("Skewness:", skew_val),
1743848505839:hjust = 1.2, vjust = 1.2, size = 4) +
1743848505839:ggtitle(paste("Original", var)) +
1743848505840:theme_minimal()
1743848505840:})
1743848505949:# log transformation
1743848505949:winequality <- winequality %>%
1743848505949:mutate(across(all_of(outlier_vars), ~ log1p(.x)))
1743848505952:# check skewness
1743848505952:transformed_plots <- lapply(outlier_vars, function(var) {
1743848505952:skew_val <- round(skewness(winequality[[var]]), 2)
1743848505952:ggplot(winequality, aes(x = .data[[var]])) +
1743848505953:geom_histogram(bins = 30, fill = "lightgreen", color = "black") +
1743848505953:geom_vline(aes(xintercept = mean(.data[[var]])),
1743848505953:color = "darkgreen", linetype = "dashed") +
1743848505953:annotate("text", x = Inf, y = Inf,
1743848505953:label = paste("Skewness:", skew_val),
1743848505953:hjust = 1.2, vjust = 1.2, size = 4) +
1743848505954:ggtitle(paste("Transformed", var)) +
1743848505954:theme_minimal()
1743848505954:})
1743848506024:# display plots
1743848506024:ggsave(
1743848506024:"log_transformation.png",
1743848506024:arrangeGrob(grobs = combined_plots, ncol = 3, nrow = 2),
1743848506024:width = 14, height = 8
1743848506024:)
1743848507051:# === MISSING VALUE HANDLING ====
1743848507051:# check missing
1743848507052:sum(is.na(winequality))
1743848507052:# introduce missing value
1743848507052:winequality_missing <- winequality
1743848507052:predictor_vars <- setdiff(names(winequality_missing), "quality")
1743848507052:for (col in predictor_vars) {
1743848507053:if (is.numeric(winequality_missing[[col]])) {
1743848507053:winequality_missing[[col]][sample(1:nrow(winequality_missing), 1000)] <- NA
1743848507053:}
1743848507053:}
1743848507061:# missing report
1743848507061:missing_report <- data.frame(
1743848507061:Variable = names(winequality_missing),
1743848507061:Missing = sapply(winequality_missing, function(x) sum(is.na(x))),
1743848507061:Percent = round(sapply(winequality_missing, function(x) mean(is.na(x)))*100, 2)
1743848507061:)
1743848507066:print("Missing Value Report:")
1743848507066:print(missing_report)
1743848507068:# mean imputation
1743848507068:method1 <- mice(
1743848507068:winequality_missing,
1743848507069:method = "mean",  # Correct method name for mean imputation
1743848507069:m = 1,
1743848507069:maxit = 1,
1743848507069:printFlag = FALSE
1743848507069:)
1743848507265:winequality_mean <- complete(method1)
1743848507268:# KNN imputation
1743848507268:method2 <- mice(
1743848507268:winequality_missing,
1743848507269:method = "pmm",
1743848507269:m = 1,
1743848507269:maxit = 1,
1743848507269:printFlag = FALSE
1743848507269:)
1743848507416:winequality_knn <- complete(method2)
1743848507420:# compare imputation
1743848507420:compare_imputation <- function(original, method1, method2, var) {
1743848507421:# Original distribution
1743848507421:p1 <- ggplot(data.frame(value = original[[var]]), aes(x = value)) +
1743848507421:geom_density(color = "blue", fill = "blue", alpha = 0.3) +
1743848507421:ggtitle("Original Distribution")
1743848507421:# mean imputation
1743848507421:p2 <- ggplot(data.frame(value = method1[[var]]), aes(x = value)) +
1743848507421:geom_density(color = "red", fill = "red", alpha = 0.3) +
1743848507421:ggtitle("Mean Imputation")
1743848507422:# KNN imputation
1743848507422:p3 <- ggplot(data.frame(value = method2[[var]]), aes(x = value)) +
1743848507422:geom_density(color = "green", fill = "green", alpha = 0.3) +
1743848507422:ggtitle("K-NN Imputation")
1743848507422:grid.arrange(p1, p2, p3, ncol = 3)
1743848507422:}
1743848507423:png("missing_handling_1.png", width = 1200, height = 800, res = 150)
1743848507423:compare_imputation(winequality, winequality_mean, winequality_knn, "residual.sugar")
1743848507744:dev.off()
1743848507788:compare_violin <- function(original, method1, method2, var) {
1743848507788:df <- data.frame(
1743848507788:Value = c(original[[var]], method1[[var]], method2[[var]]),
1743848507789:Type = c(rep("Original", nrow(original)),
1743848507789:rep("Imputed", nrow(method1)*2)),
1743848507789:Method = c(rep("Original", nrow(original)),
1743848507789:rep("Mean", nrow(method1)),
1743848507789:rep("K-NN", nrow(method2)))
1743848507789:)
1743848507789:ggplot(df, aes(x = Method, y = Value, fill = Type)) +
1743848507790:geom_violin(alpha = 0.5, trim = FALSE) +
1743848507790:geom_jitter(aes(color = Type), width = 0.2, alpha = 0.3) +
1743848507790:ggtitle(paste("Distribution Comparison for", var)) +
1743848507790:theme_minimal()
1743848507790:}
1743848507791:png("missing_handling_2.png", width = 1200, height = 800, res = 150)
1743848507791:compare_violin(winequality, winequality_mean, winequality_knn, "residual.sugar")
1743848508336:dev.off()
1743848508427:# === TRAIN-TEST SPLIT, MIN-MAX SCALING ===
1743848508428:data <- winequality_knn
1743848508428:split_ratios <- list(
1743848508428:"70-30" = 0.7,
1743848508428:"80-20" = 0.8,
1743848508428:"90-10" = 0.9
1743848508429:)
1743848508429:results <- data.frame()
1743848508429:for (split_name in names(split_ratios)) {
1743848508429:ratio <- split_ratios[[split_name]]
1743848508430:# split data
1743848508430:trainIndex <- createDataPartition(data$quality, p = ratio, list = FALSE)
1743848508430:train_data <- data[trainIndex, ]
1743848508430:test_data <- data[-trainIndex, ]
1743848508430:# min-max scaling
1743848508431:preproc <- preProcess(train_data[, -which(names(train_data) == "quality")], method = "range")
1743848508431:train_scaled <- predict(preproc, train_data)
1743848508431:test_scaled <- predict(preproc, test_data)
1743848508431:# modeling
1743848508431:model <- randomForest(
1743848508432:x = train_scaled[, -which(names(train_scaled) == "quality")],
1743848508432:y = train_scaled$quality,
1743848508432:ntree = 100,
1743848508432:importance = TRUE
1743848508432:)
1743848508433:# predict
1743848508433:predictions <- predict(model, test_scaled[, -which(names(test_scaled) == "quality")])
1743848508433:# metrics
1743848508434:rmse <- sqrt(mean((predictions - test_data$quality)^2))
1743848508434:mae <- mean(abs(predictions - test_data$quality))
1743848508434:r_squared <- cor(predictions, test_data$quality)^2
1743848508434:results <- rbind(results, data.frame(
1743848508435:Split = split_name,  # Use split_name directly
1743848508435:RMSE = round(rmse, 2),
1743848508435:MAE = round(mae, 2),
1743848508435:R_Squared = round(r_squared, 2),
1743848508435:Train_Size = nrow(train_data),
1743848508436:Test_Size = nrow(test_data)
1743848508436:))
1743848508436:}
1743848515178:# RMSE
1743848515178:print("Model Performance Across Splits:")
1743848515179:print(results)
1743848515180:png("RMSE.png", width = 1200, height = 800, res = 150)
1743848515181:ggplot(results, aes(x = Split, y = RMSE, fill = Split)) +
1743848515181:geom_bar(stat = "identity") +
1743848515181:geom_text(aes(label = RMSE), vjust = -0.5) +
1743848515181:labs(title = "Model Performance Comparison (RMSE)",
1743848515181:y = "Root Mean Squared Error",
1743848515181:x = "Train-Test Split Ratio") +
1743848515181:theme_minimal()
1743848515336:dev.off()
1743848515386:# === VISUALIZE MIN-MAX SCALE ===
1743848515387:n_features <- length(predictor_vars)
1743848515387:n_rows <- ceiling(n_features / 2)
1743848515387:height <- max(8, n_rows * 2.5)
1743848515387:ggplot(comparison_all, aes(x = Value, fill = Type)) +
1743848515387:geom_histogram(bins = 30, alpha = 0.5, position = "identity") +
1743848515387:# min/max lines
1743848515388:geom_vline(data = summary_all,
1743848515388:aes(xintercept = Min, color = Type),
1743848515388:linetype = "dashed") +
1743848515388:geom_vline(data = summary_all,
1743848515388:aes(xintercept = Max, color = Type),
1743848515388:linetype = "dashed") +
1743848515388:# Facet grid
1743848515389:facet_wrap(~ Feature,
1743848515389:scales = "free",
1743848515389:ncol = 2,
1743848515389:labeller = label_wrap_gen(width = 25)) +
1743848515389:# color & style
1743848515390:scale_fill_manual(values = c("Original" = "lightblue", "Scaled" = "lightgreen")) +
1743848515390:scale_color_manual(values = c("Original" = "blue", "Scaled" = "green")) +
1743848515390:labs(title = "Min-Max Scaling Effects Across All Features",
1743848515390:subtitle = "Blue: Original | Green: Scaled [0,1]",
1743848515390:x = "Value",
1743848515390:y = "Count") +
1743848515390:theme_minimal() +
1743848515390:theme(
1743848515391:legend.position = "bottom",
1743848515391:axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
1743848515391:strip.text = element_text(size = 9, face = "bold"),
1743848515391:panel.spacing = unit(1.5, "lines"),  # Increased spacing between panels
1743848515391:plot.title = element_text(size = 14),
1743848515391:plot.subtitle = element_text(size = 11)
1743848515391:)
1743848516465:# Save with appropriate dimensions
1743848516465:ggsave("min_max_scaling.png",
1743848516466:width = 16,
1743848516466:height = height,
1743848516466:units = "in",
1743848516466:dpi = 300)
1743848690876:# library
1743848690876:# install.packages("dplyr")
1743848690877:# install.packages("e1071")
1743848690877:# install.packages("gridExtra")
1743848690877:# install.packages("ggplot2")
1743848690877:# install.packages("VIM")
1743848690877:# install.packages("mice")
1743848690877:# install.packages("caret")
1743848690877:# install.packages("randomForest")
1743848690877:# install.packages("GGally")
1743848690878:# install.packages("plotly")
1743848690878:# install.packages("tidyverse")
1743848690878:library(dplyr)
1743848690890:library(e1071)
1743848690967:library(gridExtra)
1743848690985:library(ggplot2)
1743848691023:library(VIM)
1743848693027:library(mice)
1743848693504:library(caret)
1743848694197:library(randomForest)
1743848694218:library(GGally)
1743848694230:library(plotly)
1743848694306:library(tidyr)
1743848694318:library(dplyr)
1743848694318:library(tidyverse)
1743848694581:# seed
1743848694581:set.seed(123)
1743848694582:# dataset
1743848694582:winequality <- read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv", sep = ";")
1743848696669:tail(winequality, n=3)
1743848696674:# summary
1743848696675:summary(winequality)
1743848696697:# === OUTLIER HANDLING ===
1743848696697:# check outlier
1743848696697:png("outlier_check_before.png", width = 1200, height = 400)
1743848696734:par(mfrow = c(1, 3))
1743848696734:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743848696734:for (var in outlier_vars) {
1743848696734:boxplot(winequality[[var]],
1743848696734:main = paste(var, "Distribution"),
1743848696734:ylab = var)
1743848696734:}
1743848696797:dev.off()
1743848696819:# IQR
1743848696819:detect_outliers <- function(x) {
1743848696819:Q1 <- quantile(x, 0.25, na.rm = TRUE)
1743848696819:Q3 <- quantile(x, 0.75, na.rm = TRUE)
1743848696819:IQR <- Q3 - Q1
1743848696819:lower_bound <- Q1 - 1.5 * IQR
1743848696819:upper_bound <- Q3 + 1.5 * IQR
1743848696819:return(list(lower = lower_bound, upper = upper_bound))
1743848696819:}
1743848696820:# winsorize outliers
1743848696820:winsorize_iqr <- function(x) {
1743848696820:bounds <- detect_outliers(x)
1743848696820:x[x < bounds$lower] <- bounds$lower  # Replace lower outliers with Q1 - 1.5*IQR
1743848696820:x[x > bounds$upper] <- bounds$upper  # Replace upper outliers with Q3 + 1.5*IQR
1743848696820:return(x)
1743848696820:}
1743848696821:winequality <- winequality %>%
1743848696821:mutate(across(all_of(outlier_vars), ~ winsorize_iqr(.x)))
1743848696846:tail(winequality, n=3)
1743848696848:summary(winequality)
1743848696855:# check outlier
1743848696855:png("outlier_check_after.png", width = 1200, height = 400)
1743848696856:par(mfrow = c(1, 3))
1743848696856:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743848696856:for (var in outlier_vars) {
1743848696856:boxplot(winequality[[var]],
1743848696856:main = paste(var, "Distribution"),
1743848696856:ylab = var)
1743848696856:}
1743848696866:dev.off()
1743848696892:# === LOG TRANSFORMATION ===
1743848696892:# calc skewness
1743848696892:numeric_vars <- names(winequality)[sapply(winequality, is.numeric)]
1743848696892:skewness_report <- data.frame(
1743848696892:Variable = numeric_vars,
1743848696892:Skewness = round(sapply(winequality[, numeric_vars], skewness), 2)
1743848696892:)
1743848696896:skewness_report <- skewness_report[order(-abs(skewness_report$Skewness)), ]
1743848696897:print("Skewness Report (Before Transformation):")
1743848696897:print(skewness_report)
1743848696899:high_skew_vars <- skewness_report %>%
1743848696899:filter(Skewness > 1) %>%
1743848696899:pull(Variable)
1743848696907:# check skewness
1743848696907:original_plots <- lapply(high_skew_vars, function(var) {
1743848696907:skew_val <- round(skewness(winequality[[var]]), 2)
1743848696907:ggplot(winequality, aes_string(var)) +
1743848696907:geom_histogram(bins = 30, fill = "lightblue", color = "black") +
1743848696907:geom_vline(aes(xintercept = mean(winequality[[var]])),
1743848696907:color = "red", linetype = "dashed") +
1743848696907:annotate("text", x = Inf, y = Inf,
1743848696908:label = paste("Skewness:", skew_val),
1743848696908:hjust = 1.2, vjust = 1.2, size = 4) +
1743848696908:ggtitle(paste("Original", var)) +
1743848696908:theme_minimal()
1743848696908:})
1743848697037:# log transformation
1743848697037:winequality <- winequality %>%
1743848697037:mutate(across(all_of(outlier_vars), ~ log1p(.x)))
1743848697040:# check skewness
1743848697040:transformed_plots <- lapply(outlier_vars, function(var) {
1743848697040:skew_val <- round(skewness(winequality[[var]]), 2)
1743848697040:ggplot(winequality, aes(x = .data[[var]])) +
1743848697041:geom_histogram(bins = 30, fill = "lightgreen", color = "black") +
1743848697041:geom_vline(aes(xintercept = mean(.data[[var]])),
1743848697041:color = "darkgreen", linetype = "dashed") +
1743848697041:annotate("text", x = Inf, y = Inf,
1743848697041:label = paste("Skewness:", skew_val),
1743848697041:hjust = 1.2, vjust = 1.2, size = 4) +
1743848697041:ggtitle(paste("Transformed", var)) +
1743848697041:theme_minimal()
1743848697041:})
1743848697076:# display plots
1743848697076:ggsave(
1743848697076:"log_transformation.png",
1743848697076:arrangeGrob(grobs = combined_plots, ncol = 3, nrow = 2),
1743848697077:width = 14, height = 8
1743848697077:)
1743848698661:# === MISSING VALUE HANDLING ====
1743848698662:# check missing
1743848698662:sum(is.na(winequality))
1743848698663:# introduce missing value
1743848698663:winequality_missing <- winequality
1743848698663:predictor_vars <- setdiff(names(winequality_missing), "quality")
1743848698663:for (col in predictor_vars) {
1743848698663:if (is.numeric(winequality_missing[[col]])) {
1743848698663:winequality_missing[[col]][sample(1:nrow(winequality_missing), 1000)] <- NA
1743848698664:}
1743848698664:}
1743848698672:# missing report
1743848698672:missing_report <- data.frame(
1743848698672:Variable = names(winequality_missing),
1743848698672:Missing = sapply(winequality_missing, function(x) sum(is.na(x))),
1743848698672:Percent = round(sapply(winequality_missing, function(x) mean(is.na(x)))*100, 2)
1743848698672:)
1743848698676:print("Missing Value Report:")
1743848698677:print(missing_report)
1743848698678:# mean imputation
1743848698679:method1 <- mice(
1743848698679:winequality_missing,
1743848698679:method = "mean",  # Correct method name for mean imputation
1743848698679:m = 1,
1743848698679:maxit = 1,
1743848698679:printFlag = FALSE
1743848698679:)
1743848698813:winequality_mean <- complete(method1)
1743848698816:# KNN imputation
1743848698816:method2 <- mice(
1743848698816:winequality_missing,
1743848698816:method = "pmm",
1743848698816:m = 1,
1743848698816:maxit = 1,
1743848698816:printFlag = FALSE
1743848698816:)
1743848699056:winequality_knn <- complete(method2)
1743848699074:# compare imputation
1743848699074:compare_imputation <- function(original, method1, method2, var) {
1743848699074:# Original distribution
1743848699074:p1 <- ggplot(data.frame(value = original[[var]]), aes(x = value)) +
1743848699074:geom_density(color = "blue", fill = "blue", alpha = 0.3) +
1743848699074:ggtitle("Original Distribution")
1743848699074:# mean imputation
1743848699074:p2 <- ggplot(data.frame(value = method1[[var]]), aes(x = value)) +
1743848699075:geom_density(color = "red", fill = "red", alpha = 0.3) +
1743848699075:ggtitle("Mean Imputation")
1743848699075:# KNN imputation
1743848699075:p3 <- ggplot(data.frame(value = method2[[var]]), aes(x = value)) +
1743848699075:geom_density(color = "green", fill = "green", alpha = 0.3) +
1743848699075:ggtitle("K-NN Imputation")
1743848699076:grid.arrange(p1, p2, p3, ncol = 3)
1743848699076:}
1743848699076:png("missing_handling_1.png", width = 1200, height = 800, res = 150)
1743848699076:compare_imputation(winequality, winequality_mean, winequality_knn, "residual.sugar")
1743848699458:dev.off()
1743848699505:compare_violin <- function(original, method1, method2, var) {
1743848699505:df <- data.frame(
1743848699505:Value = c(original[[var]], method1[[var]], method2[[var]]),
1743848699505:Type = c(rep("Original", nrow(original)),
1743848699505:rep("Imputed", nrow(method1)*2)),
1743848699505:Method = c(rep("Original", nrow(original)),
1743848699505:rep("Mean", nrow(method1)),
1743848699505:rep("K-NN", nrow(method2)))
1743848699505:)
1743848699505:ggplot(df, aes(x = Method, y = Value, fill = Type)) +
1743848699506:geom_violin(alpha = 0.5, trim = FALSE) +
1743848699506:geom_jitter(aes(color = Type), width = 0.2, alpha = 0.3) +
1743848699506:ggtitle(paste("Distribution Comparison for", var)) +
1743848699506:theme_minimal()
1743848699506:}
1743848699506:png("missing_handling_2.png", width = 1200, height = 800, res = 150)
1743848699507:compare_violin(winequality, winequality_mean, winequality_knn, "residual.sugar")
1743848700093:dev.off()
1743848700168:# === TRAIN-TEST SPLIT, MIN-MAX SCALING ===
1743848700168:data <- winequality_knn
1743848700168:split_ratios <- list(
1743848700169:"70-30" = 0.7,
1743848700169:"80-20" = 0.8,
1743848700169:"90-10" = 0.9
1743848700169:)
1743848700169:results <- data.frame()
1743848700169:for (split_name in names(split_ratios)) {
1743848700169:ratio <- split_ratios[[split_name]]
1743848700169:# split data
1743848700170:trainIndex <- createDataPartition(data$quality, p = ratio, list = FALSE)
1743848700170:train_data <- data[trainIndex, ]
1743848700170:test_data <- data[-trainIndex, ]
1743848700170:# min-max scaling
1743848700170:preproc <- preProcess(train_data[, -which(names(train_data) == "quality")], method = "range")
1743848700170:train_scaled <- predict(preproc, train_data)
1743848700170:test_scaled <- predict(preproc, test_data)
1743848700171:# modeling
1743848700171:model <- randomForest(
1743848700171:x = train_scaled[, -which(names(train_scaled) == "quality")],
1743848700171:y = train_scaled$quality,
1743848700171:ntree = 100,
1743848700171:importance = TRUE
1743848700171:)
1743848700172:# predict
1743848700172:predictions <- predict(model, test_scaled[, -which(names(test_scaled) == "quality")])
1743848700172:# metrics
1743848700172:rmse <- sqrt(mean((predictions - test_data$quality)^2))
1743848700172:mae <- mean(abs(predictions - test_data$quality))
1743848700172:r_squared <- cor(predictions, test_data$quality)^2
1743848700173:results <- rbind(results, data.frame(
1743848700173:Split = split_name,  # Use split_name directly
1743848700173:RMSE = round(rmse, 2),
1743848700173:MAE = round(mae, 2),
1743848700173:R_Squared = round(r_squared, 2),
1743848700173:Train_Size = nrow(train_data),
1743848700174:Test_Size = nrow(test_data)
1743848700174:))
1743848700174:}
1743848707149:# RMSE
1743848707149:print("Model Performance Across Splits:")
1743848707150:print(results)
1743848707151:png("RMSE.png", width = 1200, height = 800, res = 150)
1743848707152:ggplot(results, aes(x = Split, y = RMSE, fill = Split)) +
1743848707152:geom_bar(stat = "identity") +
1743848707152:geom_text(aes(label = RMSE), vjust = -0.5) +
1743848707152:labs(title = "Model Performance Comparison (RMSE)",
1743848707153:y = "Root Mean Squared Error",
1743848707153:x = "Train-Test Split Ratio") +
1743848707153:theme_minimal()
1743848707468:dev.off()
1743848707505:# === VISUALIZE MIN-MAX SCALE ===
1743848707505:comparison_all <- predictor_vars %>%
1743848707505:map_dfr(~{
1743848707505:tibble(
1743848707505:Feature = .x,
1743848707505:Original = train_data[[.x]],   # From original data
1743848707505:Scaled = train_scaled[[.x]]    # From scaled data
1743848707505:) %>%
1743848707505:pivot_longer(cols = c(Original, Scaled),
1743848707506:names_to = "Type",
1743848707506:values_to = "Value")
1743848707506:})
1743848707566:# layout
1743848707566:n_features <- length(predictor_vars)
1743848707567:n_rows <- ceiling(n_features / 2)
1743848707567:height <- max(8, n_rows * 2.5)
1743848707567:ggplot(comparison_all, aes(x = Value, fill = Type)) +
1743848707567:geom_histogram(bins = 30, alpha = 0.5, position = "identity") +
1743848707567:# min/max lines
1743848707567:geom_vline(data = summary_all,
1743848707567:aes(xintercept = Min, color = Type),
1743848707567:linetype = "dashed") +
1743848707567:geom_vline(data = summary_all,
1743848707567:aes(xintercept = Max, color = Type),
1743848707567:linetype = "dashed") +
1743848707568:# Facet grid
1743848707568:facet_wrap(~ Feature,
1743848707568:scales = "free",
1743848707568:ncol = 2,
1743848707568:labeller = label_wrap_gen(width = 25)) +
1743848707568:# color & style
1743848707568:scale_fill_manual(values = c("Original" = "lightblue", "Scaled" = "lightgreen")) +
1743848707568:scale_color_manual(values = c("Original" = "blue", "Scaled" = "green")) +
1743848707568:labs(title = "Min-Max Scaling Effects Across All Features",
1743848707568:subtitle = "Blue: Original | Green: Scaled [0,1]",
1743848707568:x = "Value",
1743848707569:y = "Count") +
1743848707569:theme_minimal() +
1743848707569:theme(
1743848707569:legend.position = "bottom",
1743848707569:axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
1743848707569:strip.text = element_text(size = 9, face = "bold"),
1743848707569:panel.spacing = unit(1.5, "lines"),  # Increased spacing between panels
1743848707569:plot.title = element_text(size = 14),
1743848707569:plot.subtitle = element_text(size = 11)
1743848707569:)
1743848708587:# Save with appropriate dimensions
1743848708587:ggsave("min_max_scaling.png",
1743848708587:width = 16,
1743848708587:height = height,
1743848708587:units = "in",
1743848708588:dpi = 300)
1743849067153:# library
1743849067153:# install.packages("dplyr")
1743849067153:# install.packages("e1071")
1743849067154:# install.packages("gridExtra")
1743849067154:# install.packages("ggplot2")
1743849067154:# install.packages("VIM")
1743849067154:# install.packages("mice")
1743849067154:# install.packages("caret")
1743849067154:# install.packages("randomForest")
1743849067154:# install.packages("GGally")
1743849067154:# install.packages("plotly")
1743849067154:# install.packages("tidyverse")
1743849067154:library(dplyr)
1743849067154:library(e1071)
1743849067155:library(gridExtra)
1743849067155:library(ggplot2)
1743849067155:library(VIM)
1743849067155:library(mice)
1743849067155:library(caret)
1743849067156:library(randomForest)
1743849067156:library(GGally)
1743849067156:library(plotly)
1743849067156:library(tidyr)
1743849067157:library(dplyr)
1743849067157:library(tidyverse)
1743849067157:# seed
1743849067157:set.seed(123)
1743849067158:# dataset
1743849067158:winequality <- read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv", sep = ";")
1743849068544:tail(winequality, n=3)
1743849068548:# summary
1743849068548:summary(winequality)
1743849068558:# === OUTLIER HANDLING ===
1743849068558:# check outlier
1743849068558:png("outlier_check_before.png", width = 1200, height = 400)
1743849068561:par(mfrow = c(1, 3))
1743849068561:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743849068561:for (var in outlier_vars) {
1743849068561:boxplot(winequality[[var]],
1743849068561:main = paste(var, "Distribution"),
1743849068561:ylab = var)
1743849068562:}
1743849068575:dev.off()
1743849068595:# IQR
1743849068595:detect_outliers <- function(x) {
1743849068595:Q1 <- quantile(x, 0.25, na.rm = TRUE)
1743849068595:Q3 <- quantile(x, 0.75, na.rm = TRUE)
1743849068596:IQR <- Q3 - Q1
1743849068596:lower_bound <- Q1 - 1.5 * IQR
1743849068596:upper_bound <- Q3 + 1.5 * IQR
1743849068596:return(list(lower = lower_bound, upper = upper_bound))
1743849068596:}
1743849068596:# winsorize outliers
1743849068596:winsorize_iqr <- function(x) {
1743849068596:bounds <- detect_outliers(x)
1743849068597:x[x < bounds$lower] <- bounds$lower
1743849068597:x[x > bounds$upper] <- bounds$upper
1743849068597:return(x)
1743849068597:}
1743849068597:winequality <- winequality %>%
1743849068597:mutate(across(all_of(outlier_vars), ~ winsorize_iqr(.x)))
1743849068612:tail(winequality, n=3)
1743849068615:summary(winequality)
1743849068622:# check outlier
1743849068622:png("outlier_check_after.png", width = 1200, height = 400)
1743849068623:par(mfrow = c(1, 3))
1743849068623:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743849068623:for (var in outlier_vars) {
1743849068623:boxplot(winequality[[var]],
1743849068623:main = paste(var, "Distribution"),
1743849068623:ylab = var)
1743849068624:}
1743849068633:dev.off()
1743849068652:# === LOG TRANSFORMATION ===
1743849068652:# calc skewness
1743849068652:numeric_vars <- names(winequality)[sapply(winequality, is.numeric)]
1743849068653:skewness_report <- data.frame(
1743849068653:Variable = numeric_vars,
1743849068653:Skewness = round(sapply(winequality[, numeric_vars], skewness), 2)
1743849068653:)
1743849068657:skewness_report <- skewness_report[order(-abs(skewness_report$Skewness)), ]
1743849068657:print("Skewness Report (Before Transformation):")
1743849068657:print(skewness_report)
1743849068659:high_skew_vars <- skewness_report %>%
1743849068659:filter(Skewness > 1) %>%
1743849068659:pull(Variable)
1743849068661:# check skewness
1743849068661:original_plots <- lapply(high_skew_vars, function(var) {
1743849068661:skew_val <- round(skewness(winequality[[var]]), 2)
1743849068662:ggplot(winequality, aes_string(var)) +
1743849068662:geom_histogram(bins = 30, fill = "lightblue", color = "black") +
1743849068662:geom_vline(aes(xintercept = mean(winequality[[var]])),
1743849068662:color = "red", linetype = "dashed") +
1743849068662:annotate("text", x = Inf, y = Inf,
1743849068662:label = paste("Skewness:", skew_val),
1743849068662:hjust = 1.2, vjust = 1.2, size = 4) +
1743849068663:ggtitle(paste("Original", var)) +
1743849068663:theme_minimal()
1743849068663:})
1743849068704:# log transformation
1743849068704:winequality <- winequality %>%
1743849068705:mutate(across(all_of(outlier_vars), ~ log1p(.x)))
1743849068708:# check skewness
1743849068708:transformed_plots <- lapply(outlier_vars, function(var) {
1743849068708:skew_val <- round(skewness(winequality[[var]]), 2)
1743849068708:ggplot(winequality, aes(x = .data[[var]])) +
1743849068708:geom_histogram(bins = 30, fill = "lightgreen", color = "black") +
1743849068708:geom_vline(aes(xintercept = mean(.data[[var]])),
1743849068708:color = "darkgreen", linetype = "dashed") +
1743849068708:annotate("text", x = Inf, y = Inf,
1743849068708:label = paste("Skewness:", skew_val),
1743849068708:hjust = 1.2, vjust = 1.2, size = 4) +
1743849068709:ggtitle(paste("Transformed", var)) +
1743849068709:theme_minimal()
1743849068709:})
1743849068753:# display plots
1743849068753:ggsave(
1743849068754:"log_transformation.png",
1743849068754:arrangeGrob(grobs = combined_plots, ncol = 3, nrow = 2),
1743849068754:width = 14, height = 8
1743849068754:)
1743849069717:# === MISSING VALUE HANDLING ====
1743849069717:# check missing
1743849069717:sum(is.na(winequality))
1743849069718:# introduce missing value
1743849069718:winequality_missing <- winequality
1743849069718:predictor_vars <- setdiff(names(winequality_missing), "quality")
1743849069718:for (col in predictor_vars) {
1743849069719:if (is.numeric(winequality_missing[[col]])) {
1743849069719:winequality_missing[[col]][sample(1:nrow(winequality_missing), 1000)] <- NA
1743849069719:}
1743849069719:}
1743849069725:# missing report
1743849069726:missing_report <- data.frame(
1743849069726:Variable = names(winequality_missing),
1743849069726:Missing = sapply(winequality_missing, function(x) sum(is.na(x))),
1743849069726:Percent = round(sapply(winequality_missing, function(x) mean(is.na(x)))*100, 2)
1743849069726:)
1743849069729:print("Missing Value Report:")
1743849069730:print(missing_report)
1743849069731:# mean imputation
1743849069732:method1 <- mice(
1743849069732:winequality_missing,
1743849069732:method = "mean",  # Correct method name for mean imputation
1743849069732:m = 1,
1743849069732:maxit = 1,
1743849069732:printFlag = FALSE
1743849069732:)
1743849069839:winequality_mean <- complete(method1)
1743849069842:# KNN imputation
1743849069842:method2 <- mice(
1743849069842:winequality_missing,
1743849069842:method = "pmm",
1743849069842:m = 1,
1743849069842:maxit = 1,
1743849069843:printFlag = FALSE
1743849069843:)
1743849069961:winequality_knn <- complete(method2)
1743849069971:# compare imputation
1743849069971:compare_imputation <- function(original, method1, method2, var) {
1743849069971:# Original distribution
1743849069971:p1 <- ggplot(data.frame(value = original[[var]]), aes(x = value)) +
1743849069971:geom_density(color = "blue", fill = "blue", alpha = 0.3) +
1743849069972:ggtitle("Original Distribution")
1743849069972:# mean imputation
1743849069972:p2 <- ggplot(data.frame(value = method1[[var]]), aes(x = value)) +
1743849069972:geom_density(color = "red", fill = "red", alpha = 0.3) +
1743849069972:ggtitle("Mean Imputation")
1743849069972:# KNN imputation
1743849069972:p3 <- ggplot(data.frame(value = method2[[var]]), aes(x = value)) +
1743849069972:geom_density(color = "green", fill = "green", alpha = 0.3) +
1743849069972:ggtitle("K-NN Imputation")
1743849069973:grid.arrange(p1, p2, p3, ncol = 3)
1743849069973:}
1743849069973:png("missing_handling_1.png", width = 1200, height = 800, res = 150)
1743849069974:compare_imputation(winequality, winequality_mean, winequality_knn, "residual.sugar")
1743849070236:dev.off()
1743849070279:compare_violin <- function(original, method1, method2, var) {
1743849070279:df <- data.frame(
1743849070279:Value = c(original[[var]], method1[[var]], method2[[var]]),
1743849070279:Type = c(rep("Original", nrow(original)),
1743849070279:rep("Imputed", nrow(method1)*2)),
1743849070279:Method = c(rep("Original", nrow(original)),
1743849070279:rep("Mean", nrow(method1)),
1743849070280:rep("K-NN", nrow(method2)))
1743849070280:)
1743849070280:ggplot(df, aes(x = Method, y = Value, fill = Type)) +
1743849070280:geom_violin(alpha = 0.5, trim = FALSE) +
1743849070280:geom_jitter(aes(color = Type), width = 0.2, alpha = 0.3) +
1743849070280:ggtitle(paste("Distribution Comparison for", var)) +
1743849070280:theme_minimal()
1743849070281:}
1743849070281:png("missing_handling_2.png", width = 1200, height = 800, res = 150)
1743849070281:compare_violin(winequality, winequality_mean, winequality_knn, "residual.sugar")
1743849070759:dev.off()
1743849070842:# === TRAIN-TEST SPLIT, MIN-MAX SCALING ===
1743849070842:data <- winequality_knn
1743849070842:split_ratios <- list(
1743849070843:"70-30" = 0.7,
1743849070843:"80-20" = 0.8,
1743849070843:"90-10" = 0.9
1743849070843:)
1743849070843:results <- data.frame()
1743849070843:for (split_name in names(split_ratios)) {
1743849070844:ratio <- split_ratios[[split_name]]
1743849070844:# split data
1743849070844:trainIndex <- createDataPartition(data$quality, p = ratio, list = FALSE)
1743849070844:train_data <- data[trainIndex, ]
1743849070844:test_data <- data[-trainIndex, ]
1743849070844:# min-max scaling
1743849070845:preproc <- preProcess(train_data[, -which(names(train_data) == "quality")], method = "range")
1743849070845:train_scaled <- predict(preproc, train_data)
1743849070845:test_scaled <- predict(preproc, test_data)
1743849070845:# modeling
1743849070845:model <- randomForest(
1743849070846:x = train_scaled[, -which(names(train_scaled) == "quality")],
1743849070846:y = train_scaled$quality,
1743849070846:ntree = 100,
1743849070846:importance = TRUE
1743849070846:)
1743849070847:# predict
1743849070847:predictions <- predict(model, test_scaled[, -which(names(test_scaled) == "quality")])
1743849070847:# metrics
1743849070847:rmse <- sqrt(mean((predictions - test_data$quality)^2))
1743849070848:mae <- mean(abs(predictions - test_data$quality))
1743849070848:r_squared <- cor(predictions, test_data$quality)^2
1743849070848:results <- rbind(results, data.frame(
1743849070848:Split = split_name,  # Use split_name directly
1743849070849:RMSE = round(rmse, 2),
1743849070849:MAE = round(mae, 2),
1743849070849:R_Squared = round(r_squared, 2),
1743849070849:Train_Size = nrow(train_data),
1743849070850:Test_Size = nrow(test_data)
1743849070850:))
1743849070850:}
1743849077492:# RMSE
1743849077493:print("Model Performance Across Splits:")
1743849077493:print(results)
1743849077494:png("RMSE.png", width = 1200, height = 800, res = 150)
1743849077495:ggplot(results, aes(x = Split, y = RMSE, fill = Split)) +
1743849077495:geom_bar(stat = "identity") +
1743849077495:geom_text(aes(label = RMSE), vjust = -0.5) +
1743849077495:labs(title = "Model Performance Comparison (RMSE)",
1743849077495:y = "Root Mean Squared Error",
1743849077495:x = "Train-Test Split Ratio") +
1743849077496:theme_minimal()
1743849077623:dev.off()
1743849077659:# === VISUALIZE MIN-MAX SCALE ===
1743849077659:comparison_all <- predictor_vars %>%
1743849077659:map_dfr(~{
1743849077660:tibble(
1743849077660:Feature = .x,
1743849077660:Original = train_data[[.x]],   # From original data
1743849077660:Scaled = train_scaled[[.x]]    # From scaled data
1743849077660:) %>%
1743849077660:pivot_longer(cols = c(Original, Scaled),
1743849077660:names_to = "Type",
1743849077660:values_to = "Value")
1743849077660:})
1743849077707:# layout
1743849077708:n_features <- length(predictor_vars)
1743849077708:n_rows <- ceiling(n_features / 2)
1743849077708:height <- max(8, n_rows * 2.5)
1743849077708:ggplot(comparison_all, aes(x = Value, fill = Type)) +
1743849077708:geom_histogram(bins = 30, alpha = 0.5, position = "identity") +
1743849077708:# min/max lines
1743849077708:geom_vline(data = summary_all,
1743849077708:aes(xintercept = Min, color = Type),
1743849077708:linetype = "dashed") +
1743849077708:geom_vline(data = summary_all,
1743849077708:aes(xintercept = Max, color = Type),
1743849077709:linetype = "dashed") +
1743849077709:# Facet grid
1743849077709:facet_wrap(~ Feature,
1743849077709:scales = "free",
1743849077709:ncol = 2,
1743849077709:labeller = label_wrap_gen(width = 25)) +
1743849077709:# color & style
1743849077709:scale_fill_manual(values = c("Original" = "lightblue", "Scaled" = "lightgreen")) +
1743849077709:scale_color_manual(values = c("Original" = "blue", "Scaled" = "green")) +
1743849077709:labs(title = "Min-Max Scaling Effects Across All Features",
1743849077709:subtitle = "Blue: Original | Green: Scaled [0,1]",
1743849077710:x = "Value",
1743849077710:y = "Count") +
1743849077710:theme_minimal() +
1743849077710:theme(
1743849077710:legend.position = "bottom",
1743849077710:axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
1743849077710:strip.text = element_text(size = 9, face = "bold"),
1743849077710:panel.spacing = unit(1.5, "lines"),  # Increased spacing between panels
1743849077710:plot.title = element_text(size = 14),
1743849077711:plot.subtitle = element_text(size = 11)
1743849077711:)
1743849078443:# Save with appropriate dimensions
1743849078444:ggsave("min_max_scaling.png",
1743849078444:width = 16,
1743849078444:height = height,
1743849078444:units = "in",
1743849078444:dpi = 300)
1743849548052:# library
1743849548052:install.packages("dplyr")
1743849548060:install.packages("e1071")
1743849552967:install.packages("gridExtra")
1743849555988:install.packages("ggplot2")
1743849555989:install.packages("VIM")
1743849556041:install.packages("mice")
1743849556086:install.packages("caret")
1743849556160:install.packages("randomForest")
1743849558427:install.packages("GGally")
1743849560602:install.packages("plotly")
1743849562978:install.packages("tidyverse")
1743849563036:library(dplyr)
1743849563043:library(e1071)
1743849563085:library(gridExtra)
1743849563098:library(ggplot2)
1743849563109:library(VIM)
1743849564285:library(mice)
1743849564648:library(caret)
1743849565135:library(randomForest)
1743849565151:library(GGally)
1743849565178:library(plotly)
1743849565248:library(tidyr)
1743849565257:library(dplyr)
1743849565258:library(tidyverse)
1743849565479:# seed
1743849565479:set.seed(123)
1743849565479:# dataset
1743849565479:winequality <- read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv", sep = ";")
1743849566752:tail(winequality, n=3)
1743849566759:# summary
1743849566760:summary(winequality)
1743849566777:# === OUTLIER HANDLING ===
1743849566777:# check outlier
1743849566777:png("outlier_check_before.png", width = 1200, height = 400)
1743849566787:par(mfrow = c(1, 3))
1743849566787:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743849566787:for (var in outlier_vars) {
1743849566787:boxplot(winequality[[var]],
1743849566788:main = paste(var, "Distribution"),
1743849566788:ylab = var)
1743849566788:}
1743849566817:dev.off()
1743849566837:# IQR
1743849566837:detect_outliers <- function(x) {
1743849566837:Q1 <- quantile(x, 0.25, na.rm = TRUE)
1743849566837:Q3 <- quantile(x, 0.75, na.rm = TRUE)
1743849566837:IQR <- Q3 - Q1
1743849566837:lower_bound <- Q1 - 1.5 * IQR
1743849566837:upper_bound <- Q3 + 1.5 * IQR
1743849566837:return(list(lower = lower_bound, upper = upper_bound))
1743849566837:}
1743849566837:# winsorize outliers
1743849566838:winsorize_iqr <- function(x) {
1743849566838:bounds <- detect_outliers(x)
1743849566838:x[x < bounds$lower] <- bounds$lower
1743849566838:x[x > bounds$upper] <- bounds$upper
1743849566838:return(x)
1743849566838:}
1743849566838:winequality <- winequality %>%
1743849566838:mutate(across(all_of(outlier_vars), ~ winsorize_iqr(.x)))
1743849566865:tail(winequality, n=3)
1743849566867:summary(winequality)
1743849566874:# check outlier
1743849566874:png("outlier_check_after.png", width = 1200, height = 400)
1743849566874:par(mfrow = c(1, 3))
1743849566874:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743849566875:for (var in outlier_vars) {
1743849566875:boxplot(winequality[[var]],
1743849566875:main = paste(var, "Distribution"),
1743849566875:ylab = var)
1743849566875:}
1743849566885:dev.off()
1743849566910:# === LOG TRANSFORMATION ===
1743849566910:# calc skewness
1743849566910:numeric_vars <- names(winequality)[sapply(winequality, is.numeric)]
1743849566911:skewness_report <- data.frame(
1743849566911:Variable = numeric_vars,
1743849566911:Skewness = round(sapply(winequality[, numeric_vars], skewness), 2)
1743849566911:)
1743849566914:skewness_report <- skewness_report[order(-abs(skewness_report$Skewness)), ]
1743849566914:print("Skewness Report (Before Transformation):")
1743849566914:print(skewness_report)
1743849566916:high_skew_vars <- skewness_report %>%
1743849566916:filter(Skewness > 1) %>%
1743849566916:pull(Variable)
1743849566919:# check skewness
1743849566919:original_plots <- lapply(high_skew_vars, function(var) {
1743849566919:skew_val <- round(skewness(winequality[[var]]), 2)
1743849566919:ggplot(winequality, aes_string(var)) +
1743849566920:geom_histogram(bins = 30, fill = "lightblue", color = "black") +
1743849566920:geom_vline(aes(xintercept = mean(winequality[[var]])),
1743849566920:color = "red", linetype = "dashed") +
1743849566920:annotate("text", x = Inf, y = Inf,
1743849566920:label = paste("Skewness:", skew_val),
1743849566920:hjust = 1.2, vjust = 1.2, size = 4) +
1743849566920:ggtitle(paste("Original", var)) +
1743849566921:theme_minimal()
1743849566921:})
1743849567057:# log transformation
1743849567058:winequality <- winequality %>%
1743849567058:mutate(across(all_of(outlier_vars), ~ log1p(.x)))
1743849567061:# check skewness
1743849567061:transformed_plots <- lapply(outlier_vars, function(var) {
1743849567062:skew_val <- round(skewness(winequality[[var]]), 2)
1743849567062:ggplot(winequality, aes(x = .data[[var]])) +
1743849567062:geom_histogram(bins = 30, fill = "lightgreen", color = "black") +
1743849567062:geom_vline(aes(xintercept = mean(.data[[var]])),
1743849567062:color = "darkgreen", linetype = "dashed") +
1743849567062:annotate("text", x = Inf, y = Inf,
1743849567063:label = paste("Skewness:", skew_val),
1743849567063:hjust = 1.2, vjust = 1.2, size = 4) +
1743849567063:ggtitle(paste("Transformed", var)) +
1743849567063:theme_minimal()
1743849567063:})
1743849567102:# display plots
1743849567102:ggsave(
1743849567102:"log_transformation.png",
1743849567102:arrangeGrob(grobs = combined_plots, ncol = 3, nrow = 2),
1743849567102:width = 14, height = 8
1743849567102:)
1743849568188:# === MISSING VALUE HANDLING ====
1743849568188:# check missing
1743849568188:sum(is.na(winequality))
1743849568188:# introduce missing value
1743849568188:winequality_missing <- winequality
1743849568189:predictor_vars <- setdiff(names(winequality_missing), "quality")
1743849568189:for (col in predictor_vars) {
1743849568189:if (is.numeric(winequality_missing[[col]])) {
1743849568189:winequality_missing[[col]][sample(1:nrow(winequality_missing), 1000)] <- NA
1743849568189:}
1743849568190:}
1743849568197:# missing report
1743849568197:missing_report <- data.frame(
1743849568197:Variable = names(winequality_missing),
1743849568197:Missing = sapply(winequality_missing, function(x) sum(is.na(x))),
1743849568197:Percent = round(sapply(winequality_missing, function(x) mean(is.na(x)))*100, 2)
1743849568197:)
1743849568201:print("Missing Value Report:")
1743849568201:print(missing_report)
1743849568204:# mean imputation
1743849568204:method1 <- mice(
1743849568204:winequality_missing,
1743849568204:method = "mean",  # Correct method name for mean imputation
1743849568204:m = 1,
1743849568204:maxit = 1,
1743849568204:printFlag = FALSE
1743849568204:)
1743849568307:winequality_mean <- complete(method1)
1743849568310:# KNN imputation
1743849568310:method2 <- mice(
1743849568310:winequality_missing,
1743849568311:method = "pmm",
1743849568311:m = 1,
1743849568311:maxit = 1,
1743849568311:printFlag = FALSE
1743849568311:)
1743849568438:winequality_knn <- complete(method2)
1743849568440:# compare imputation
1743849568440:compare_imputation <- function(original, method1, method2, var) {
1743849568440:# Original distribution
1743849568441:p1 <- ggplot(data.frame(value = original[[var]]), aes(x = value)) +
1743849568441:geom_density(color = "blue", fill = "blue", alpha = 0.3) +
1743849568441:ggtitle("Original Distribution")
1743849568441:# mean imputation
1743849568441:p2 <- ggplot(data.frame(value = method1[[var]]), aes(x = value)) +
1743849568441:geom_density(color = "red", fill = "red", alpha = 0.3) +
1743849568441:ggtitle("Mean Imputation")
1743849568441:# KNN imputation
1743849568442:p3 <- ggplot(data.frame(value = method2[[var]]), aes(x = value)) +
1743849568442:geom_density(color = "green", fill = "green", alpha = 0.3) +
1743849568442:ggtitle("K-NN Imputation")
1743849568442:grid.arrange(p1, p2, p3, ncol = 3)
1743849568442:}
1743849568442:png("missing_handling_1.png", width = 1200, height = 800, res = 150)
1743849568443:compare_imputation(winequality, winequality_mean, winequality_knn, "residual.sugar")
1743849568805:dev.off()
1743849568847:compare_violin <- function(original, method1, method2, var) {
1743849568848:df <- data.frame(
1743849568848:Value = c(original[[var]], method1[[var]], method2[[var]]),
1743849568848:Type = c(rep("Original", nrow(original)),
1743849568848:rep("Imputed", nrow(method1)*2)),
1743849568848:Method = c(rep("Original", nrow(original)),
1743849568848:rep("Mean", nrow(method1)),
1743849568848:rep("K-NN", nrow(method2)))
1743849568849:)
1743849568849:ggplot(df, aes(x = Method, y = Value, fill = Type)) +
1743849568849:geom_violin(alpha = 0.5, trim = FALSE) +
1743849568849:geom_jitter(aes(color = Type), width = 0.2, alpha = 0.3) +
1743849568849:ggtitle(paste("Distribution Comparison for", var)) +
1743849568849:theme_minimal()
1743849568849:}
1743849568850:png("missing_handling_2.png", width = 1200, height = 800, res = 150)
1743849568850:compare_violin(winequality, winequality_mean, winequality_knn, "residual.sugar")
1743849569480:dev.off()
1743849569554:# === TRAIN-TEST SPLIT, MIN-MAX SCALING ===
1743849569554:data <- winequality_knn
1743849569554:split_ratios <- list(
1743849569554:"70-30" = 0.7,
1743849569554:"80-20" = 0.8,
1743849569555:"90-10" = 0.9
1743849569555:)
1743849569555:results <- data.frame()
1743849569555:for (split_name in names(split_ratios)) {
1743849569555:ratio <- split_ratios[[split_name]]
1743849569555:# split data
1743849569556:trainIndex <- createDataPartition(data$quality, p = ratio, list = FALSE)
1743849569556:train_data <- data[trainIndex, ]
1743849569556:test_data <- data[-trainIndex, ]
1743849569556:# min-max scaling
1743849569556:preproc <- preProcess(train_data[, -which(names(train_data) == "quality")], method = "range")
1743849569556:train_scaled <- predict(preproc, train_data)
1743849569556:test_scaled <- predict(preproc, test_data)
1743849569557:# modeling
1743849569557:model <- randomForest(
1743849569557:x = train_scaled[, -which(names(train_scaled) == "quality")],
1743849569557:y = train_scaled$quality,
1743849569557:ntree = 100,
1743849569557:importance = TRUE
1743849569557:)
1743849569558:# predict
1743849569558:predictions <- predict(model, test_scaled[, -which(names(test_scaled) == "quality")])
1743849569558:# metrics
1743849569558:rmse <- sqrt(mean((predictions - test_data$quality)^2))
1743849569558:mae <- mean(abs(predictions - test_data$quality))
1743849569559:r_squared <- cor(predictions, test_data$quality)^2
1743849569559:results <- rbind(results, data.frame(
1743849569559:Split = split_name,  # Use split_name directly
1743849569559:RMSE = round(rmse, 2),
1743849569559:MAE = round(mae, 2),
1743849569560:R_Squared = round(r_squared, 2),
1743849569560:Train_Size = nrow(train_data),
1743849569560:Test_Size = nrow(test_data)
1743849569560:))
1743849569560:}
1743849576809:# RMSE
1743849576809:print("Model Performance Across Splits:")
1743849576809:print(results)
1743849576811:png("RMSE.png", width = 1200, height = 800, res = 150)
1743849576811:ggplot(results, aes(x = Split, y = RMSE, fill = Split)) +
1743849576812:geom_bar(stat = "identity") +
1743849576812:geom_text(aes(label = RMSE), vjust = -0.5) +
1743849576812:labs(title = "Model Performance Comparison (RMSE)",
1743849576812:y = "Root Mean Squared Error",
1743849576812:x = "Train-Test Split Ratio") +
1743849576812:theme_minimal()
1743849577064:dev.off()
1743849577101:# === VISUALIZE MIN-MAX SCALE ===
1743849577101:comparison_all <- predictor_vars %>%
1743849577101:map_dfr(~{
1743849577101:tibble(
1743849577101:Feature = .x,
1743849577101:Original = train_data[[.x]],   # From original data
1743849577101:Scaled = train_scaled[[.x]]    # From scaled data
1743849577102:) %>%
1743849577102:pivot_longer(cols = c(Original, Scaled),
1743849577102:names_to = "Type",
1743849577102:values_to = "Value")
1743849577102:})
1743849577175:# layout
1743849577176:n_features <- length(predictor_vars)
1743849577176:n_rows <- ceiling(n_features / 2)
1743849577176:height <- max(8, n_rows * 2.5)
1743849577176:ggplot(comparison_all, aes(x = Value, fill = Type)) +
1743849577176:geom_histogram(bins = 30, alpha = 0.5, position = "identity") +
1743849577176:# min/max lines
1743849577176:geom_vline(data = summary_all,
1743849577177:aes(xintercept = Min, color = Type),
1743849577177:linetype = "dashed") +
1743849577177:geom_vline(data = summary_all,
1743849577177:aes(xintercept = Max, color = Type),
1743849577177:linetype = "dashed") +
1743849577177:# Facet grid
1743849577178:facet_wrap(~ Feature,
1743849577178:scales = "free",
1743849577178:ncol = 2,
1743849577178:labeller = label_wrap_gen(width = 25)) +
1743849577178:# color & style
1743849577179:scale_fill_manual(values = c("Original" = "lightblue", "Scaled" = "lightgreen")) +
1743849577179:scale_color_manual(values = c("Original" = "blue", "Scaled" = "green")) +
1743849577179:labs(title = "Min-Max Scaling Effects Across All Features",
1743849577179:subtitle = "Blue: Original | Green: Scaled [0,1]",
1743849577179:x = "Value",
1743849577180:y = "Count") +
1743849577180:theme_minimal() +
1743849577180:theme(
1743849577180:legend.position = "bottom",
1743849577180:axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
1743849577180:strip.text = element_text(size = 9, face = "bold"),
1743849577181:panel.spacing = unit(1.5, "lines"),  # Increased spacing between panels
1743849577181:plot.title = element_text(size = 14),
1743849577181:plot.subtitle = element_text(size = 11)
1743849577181:)
1743849577910:# Save with appropriate dimensions
1743849577911:ggsave("min_max_scaling.png",
1743849577911:width = 16,
1743849577911:height = height,
1743849577911:units = "in",
1743849577911:dpi = 300)
1743849579703:install.packages("dplyr")
1743849582307:install.packages("caret")
1743849582308:install.packages("mice")
1743849582310:install.packages("VIM")
1743849582311:install.packages("ggplot2")
1743849582312:install.packages("tidyverse")
1743849583876:install.packages("tidyverse")
1743849585890:install.packages("ggplot2")
1743849588505:install.packages("VIM")
1743849588506:install.packages("mice")
1743849588507:install.packages("caret")
1743849593665:install.packages("caret")
1743849595918:install.packages("mice")
1743849597947:install.packages("VIM")
1743849599986:install.packages("VIM")
1743849620816:# library
1743849620816:install.packages("dplyr")
1743849620818:install.packages("e1071")
1743849620820:install.packages("gridExtra")
1743849620821:install.packages("ggplot2")
1743849620827:install.packages("VIM")
1743849620828:install.packages("mice")
1743849620829:install.packages("caret")
1743849620830:install.packages("randomForest")
1743849620831:install.packages("GGally")
1743849620832:install.packages("plotly")
1743849620833:install.packages("tidyverse")
1743849620835:library(dplyr)
1743849620835:library(e1071)
1743849620835:library(gridExtra)
1743849620835:library(ggplot2)
1743849620836:library(VIM)
1743849620836:library(mice)
1743849620836:library(caret)
1743849620836:library(randomForest)
1743849620837:library(GGally)
1743849620837:library(plotly)
1743849620837:library(tidyr)
1743849620837:library(dplyr)
1743849620838:library(tidyverse)
1743849620838:# seed
1743849620838:set.seed(123)
1743849620838:# dataset
1743849620838:winequality <- read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv", sep = ";")
1743849622147:tail(winequality, n=3)
1743849622153:# summary
1743849622153:summary(winequality)
1743849622167:# === OUTLIER HANDLING ===
1743849622168:# check outlier
1743849622168:png("outlier_check_before.png", width = 1200, height = 400)
1743849622168:par(mfrow = c(1, 3))
1743849622169:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743849622169:for (var in outlier_vars) {
1743849622169:boxplot(winequality[[var]],
1743849622169:main = paste(var, "Distribution"),
1743849622169:ylab = var)
1743849622169:}
1743849622181:dev.off()
1743849622200:# IQR
1743849622200:detect_outliers <- function(x) {
1743849622200:Q1 <- quantile(x, 0.25, na.rm = TRUE)
1743849622200:Q3 <- quantile(x, 0.75, na.rm = TRUE)
1743849622200:IQR <- Q3 - Q1
1743849622200:lower_bound <- Q1 - 1.5 * IQR
1743849622200:upper_bound <- Q3 + 1.5 * IQR
1743849622201:return(list(lower = lower_bound, upper = upper_bound))
1743849622201:}
1743849622201:# winsorize outliers
1743849622201:winsorize_iqr <- function(x) {
1743849622201:bounds <- detect_outliers(x)
1743849622201:x[x < bounds$lower] <- bounds$lower
1743849622201:x[x > bounds$upper] <- bounds$upper
1743849622201:return(x)
1743849622202:}
1743849622202:winequality <- winequality %>%
1743849622202:mutate(across(all_of(outlier_vars), ~ winsorize_iqr(.x)))
1743849622244:tail(winequality, n=3)
1743849622246:summary(winequality)
1743849622253:# check outlier
1743849622253:png("outlier_check_after.png", width = 1200, height = 400)
1743849622253:par(mfrow = c(1, 3))
1743849622253:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743849622254:for (var in outlier_vars) {
1743849622254:boxplot(winequality[[var]],
1743849622254:main = paste(var, "Distribution"),
1743849622254:ylab = var)
1743849622254:}
1743849622262:dev.off()
1743849622281:# === LOG TRANSFORMATION ===
1743849622281:# calc skewness
1743849622281:numeric_vars <- names(winequality)[sapply(winequality, is.numeric)]
1743849622281:skewness_report <- data.frame(
1743849622281:Variable = numeric_vars,
1743849622281:Skewness = round(sapply(winequality[, numeric_vars], skewness), 2)
1743849622282:)
1743849622284:skewness_report <- skewness_report[order(-abs(skewness_report$Skewness)), ]
1743849622284:print("Skewness Report (Before Transformation):")
1743849622284:print(skewness_report)
1743849622286:high_skew_vars <- skewness_report %>%
1743849622286:filter(Skewness > 1) %>%
1743849622286:pull(Variable)
1743849622287:# check skewness
1743849622287:original_plots <- lapply(high_skew_vars, function(var) {
1743849622288:skew_val <- round(skewness(winequality[[var]]), 2)
1743849622288:ggplot(winequality, aes_string(var)) +
1743849622288:geom_histogram(bins = 30, fill = "lightblue", color = "black") +
1743849622288:geom_vline(aes(xintercept = mean(winequality[[var]])),
1743849622288:color = "red", linetype = "dashed") +
1743849622288:annotate("text", x = Inf, y = Inf,
1743849622288:label = paste("Skewness:", skew_val),
1743849622288:hjust = 1.2, vjust = 1.2, size = 4) +
1743849622288:ggtitle(paste("Original", var)) +
1743849622288:theme_minimal()
1743849622288:})
1743849622331:# log transformation
1743849622331:winequality <- winequality %>%
1743849622331:mutate(across(all_of(outlier_vars), ~ log1p(.x)))
1743849622336:# check skewness
1743849622336:transformed_plots <- lapply(outlier_vars, function(var) {
1743849622336:skew_val <- round(skewness(winequality[[var]]), 2)
1743849622336:ggplot(winequality, aes(x = .data[[var]])) +
1743849622336:geom_histogram(bins = 30, fill = "lightgreen", color = "black") +
1743849622337:geom_vline(aes(xintercept = mean(.data[[var]])),
1743849622337:color = "darkgreen", linetype = "dashed") +
1743849622337:annotate("text", x = Inf, y = Inf,
1743849622337:label = paste("Skewness:", skew_val),
1743849622337:hjust = 1.2, vjust = 1.2, size = 4) +
1743849622337:ggtitle(paste("Transformed", var)) +
1743849622338:theme_minimal()
1743849622338:})
1743849622376:# display plots
1743849622376:combined_plots <- c(original_plots, transformed_plots)
1743849622377:ggsave(
1743849622377:"log_transformation.png",
1743849622377:arrangeGrob(grobs = combined_plots, ncol = 3, nrow = 2),
1743849622377:width = 14, height = 8
1743849622377:)
1743849623356:# === MISSING VALUE HANDLING ====
1743849623356:# check missing
1743849623356:sum(is.na(winequality))
1743849623357:# introduce missing value
1743849623357:winequality_missing <- winequality
1743849623357:predictor_vars <- setdiff(names(winequality_missing), "quality")
1743849623357:for (col in predictor_vars) {
1743849623358:if (is.numeric(winequality_missing[[col]])) {
1743849623358:winequality_missing[[col]][sample(1:nrow(winequality_missing), 1000)] <- NA
1743849623358:}
1743849623358:}
1743849623364:# missing report
1743849623364:missing_report <- data.frame(
1743849623364:Variable = names(winequality_missing),
1743849623364:Missing = sapply(winequality_missing, function(x) sum(is.na(x))),
1743849623364:Percent = round(sapply(winequality_missing, function(x) mean(is.na(x)))*100, 2)
1743849623364:)
1743849623368:print("Missing Value Report:")
1743849623368:print(missing_report)
1743849623370:# mean imputation
1743849623371:method1 <- mice(
1743849623371:winequality_missing,
1743849623371:method = "mean",  # Correct method name for mean imputation
1743849623371:m = 1,
1743849623371:maxit = 1,
1743849623371:printFlag = FALSE
1743849623371:)
1743849623470:winequality_mean <- complete(method1)
1743849623473:# KNN imputation
1743849623473:method2 <- mice(
1743849623473:winequality_missing,
1743849623473:method = "pmm",
1743849623473:m = 1,
1743849623473:maxit = 1,
1743849623474:printFlag = FALSE
1743849623474:)
1743849623589:winequality_knn <- complete(method2)
1743849623591:# compare imputation
1743849623591:compare_imputation <- function(original, method1, method2, var) {
1743849623591:# Original distribution
1743849623592:p1 <- ggplot(data.frame(value = original[[var]]), aes(x = value)) +
1743849623592:geom_density(color = "blue", fill = "blue", alpha = 0.3) +
1743849623592:ggtitle("Original Distribution")
1743849623592:# mean imputation
1743849623592:p2 <- ggplot(data.frame(value = method1[[var]]), aes(x = value)) +
1743849623592:geom_density(color = "red", fill = "red", alpha = 0.3) +
1743849623593:ggtitle("Mean Imputation")
1743849623593:# KNN imputation
1743849623593:p3 <- ggplot(data.frame(value = method2[[var]]), aes(x = value)) +
1743849623593:geom_density(color = "green", fill = "green", alpha = 0.3) +
1743849623593:ggtitle("K-NN Imputation")
1743849623593:grid.arrange(p1, p2, p3, ncol = 3)
1743849623593:}
1743849623594:png("missing_handling_1.png", width = 1200, height = 800, res = 150)
1743849623594:compare_imputation(winequality, winequality_mean, winequality_knn, "residual.sugar")
1743849623857:dev.off()
1743849623899:compare_violin <- function(original, method1, method2, var) {
1743849623899:df <- data.frame(
1743849623899:Value = c(original[[var]], method1[[var]], method2[[var]]),
1743849623899:Type = c(rep("Original", nrow(original)),
1743849623899:rep("Imputed", nrow(method1)*2)),
1743849623900:Method = c(rep("Original", nrow(original)),
1743849623900:rep("Mean", nrow(method1)),
1743849623900:rep("K-NN", nrow(method2)))
1743849623900:)
1743849623900:ggplot(df, aes(x = Method, y = Value, fill = Type)) +
1743849623900:geom_violin(alpha = 0.5, trim = FALSE) +
1743849623900:geom_jitter(aes(color = Type), width = 0.2, alpha = 0.3) +
1743849623900:ggtitle(paste("Distribution Comparison for", var)) +
1743849623900:theme_minimal()
1743849623901:}
1743849623901:png("missing_handling_2.png", width = 1200, height = 800, res = 150)
1743849623901:compare_violin(winequality, winequality_mean, winequality_knn, "residual.sugar")
1743849624401:dev.off()
1743849624485:# === TRAIN-TEST SPLIT, MIN-MAX SCALING ===
1743849624485:data <- winequality_knn
1743849624485:split_ratios <- list(
1743849624485:"70-30" = 0.7,
1743849624485:"80-20" = 0.8,
1743849624485:"90-10" = 0.9
1743849624485:)
1743849624486:results <- data.frame()
1743849624486:for (split_name in names(split_ratios)) {
1743849624486:ratio <- split_ratios[[split_name]]
1743849624486:# split data
1743849624486:trainIndex <- createDataPartition(data$quality, p = ratio, list = FALSE)
1743849624487:train_data <- data[trainIndex, ]
1743849624487:test_data <- data[-trainIndex, ]
1743849624487:# min-max scaling
1743849624487:preproc <- preProcess(train_data[, -which(names(train_data) == "quality")], method = "range")
1743849624487:train_scaled <- predict(preproc, train_data)
1743849624488:test_scaled <- predict(preproc, test_data)
1743849624488:# modeling
1743849624488:model <- randomForest(
1743849624488:x = train_scaled[, -which(names(train_scaled) == "quality")],
1743849624488:y = train_scaled$quality,
1743849624489:ntree = 100,
1743849624489:importance = TRUE
1743849624489:)
1743849624489:# predict
1743849624489:predictions <- predict(model, test_scaled[, -which(names(test_scaled) == "quality")])
1743849624490:# metrics
1743849624490:rmse <- sqrt(mean((predictions - test_data$quality)^2))
1743849624490:mae <- mean(abs(predictions - test_data$quality))
1743849624490:r_squared <- cor(predictions, test_data$quality)^2
1743849624491:results <- rbind(results, data.frame(
1743849624491:Split = split_name,  # Use split_name directly
1743849624491:RMSE = round(rmse, 2),
1743849624491:MAE = round(mae, 2),
1743849624491:R_Squared = round(r_squared, 2),
1743849624492:Train_Size = nrow(train_data),
1743849624492:Test_Size = nrow(test_data)
1743849624492:))
1743849624492:}
1743849631076:# RMSE
1743849631076:print("Model Performance Across Splits:")
1743849631076:print(results)
1743849631078:png("RMSE.png", width = 1200, height = 800, res = 150)
1743849631078:ggplot(results, aes(x = Split, y = RMSE, fill = Split)) +
1743849631079:geom_bar(stat = "identity") +
1743849631079:geom_text(aes(label = RMSE), vjust = -0.5) +
1743849631079:labs(title = "Model Performance Comparison (RMSE)",
1743849631079:y = "Root Mean Squared Error",
1743849631079:x = "Train-Test Split Ratio") +
1743849631079:theme_minimal()
1743849631183:dev.off()
1743849631217:# === VISUALIZE MIN-MAX SCALE ===
1743849631217:comparison_all <- predictor_vars %>%
1743849631217:map_dfr(~{
1743849631217:tibble(
1743849631217:Feature = .x,
1743849631217:Original = train_data[[.x]],   # From original data
1743849631217:Scaled = train_scaled[[.x]]    # From scaled data
1743849631217:) %>%
1743849631217:pivot_longer(cols = c(Original, Scaled),
1743849631218:names_to = "Type",
1743849631218:values_to = "Value")
1743849631218:})
1743849631264:# layout
1743849631264:n_features <- length(predictor_vars)
1743849631264:n_rows <- ceiling(n_features / 2)
1743849631264:height <- max(8, n_rows * 2.5)
1743849631264:ggplot(comparison_all, aes(x = Value, fill = Type)) +
1743849631264:geom_histogram(bins = 30, alpha = 0.5, position = "identity") +
1743849631264:# min/max lines
1743849631264:geom_vline(data = summary_all,
1743849631264:aes(xintercept = Min, color = Type),
1743849631265:linetype = "dashed") +
1743849631265:geom_vline(data = summary_all,
1743849631265:aes(xintercept = Max, color = Type),
1743849631265:linetype = "dashed") +
1743849631265:# Facet grid
1743849631265:facet_wrap(~ Feature,
1743849631265:scales = "free",
1743849631265:ncol = 2,
1743849631265:labeller = label_wrap_gen(width = 25)) +
1743849631265:# color & style
1743849631265:scale_fill_manual(values = c("Original" = "lightblue", "Scaled" = "lightgreen")) +
1743849631265:scale_color_manual(values = c("Original" = "blue", "Scaled" = "green")) +
1743849631266:labs(title = "Min-Max Scaling Effects Across All Features",
1743849631266:subtitle = "Blue: Original | Green: Scaled [0,1]",
1743849631266:x = "Value",
1743849631266:y = "Count") +
1743849631266:theme_minimal() +
1743849631266:theme(
1743849631266:legend.position = "bottom",
1743849631266:axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
1743849631266:strip.text = element_text(size = 9, face = "bold"),
1743849631266:panel.spacing = unit(1.5, "lines"),  # Increased spacing between panels
1743849631267:plot.title = element_text(size = 14),
1743849631267:plot.subtitle = element_text(size = 11)
1743849631267:)
1743849632022:# Save with appropriate dimensions
1743849632022:ggsave("min_max_scaling.png",
1743849632022:width = 16,
1743849632022:height = height,
1743849632022:units = "in",
1743849632022:dpi = 300)
1743849633802:install.packages("tidyverse")
1743849636664:install.packages("plotly")
1743849636665:install.packages("GGally")
1743849636666:install.packages("randomForest")
1743849636667:install.packages("caret")
1743849636668:install.packages("mice")
1743849636669:install.packages("VIM")
1743849636670:install.packages("ggplot2")
1743849636671:install.packages("gridExtra")
1743849636672:install.packages("e1071")
1743849636673:install.packages("dplyr")
1743849640409:install.packages("dplyr")
1743849642808:install.packages("e1071")
1743849644701:install.packages("gridExtra")
1743849644702:install.packages("ggplot2")
1743849644703:install.packages("VIM")
1743849644704:install.packages("mice")
1743849644705:install.packages("caret")
1743849644706:install.packages("randomForest")
1743849644707:install.packages("GGally")
1743849644708:install.packages("plotly")
1743849645986:install.packages("plotly")
1743849648880:install.packages("GGally")
1743849651235:install.packages("randomForest")
1743849651237:install.packages("caret")
1743849651238:install.packages("mice")
1743849651239:install.packages("VIM")
1743849651240:install.packages("ggplot2")
1743849651240:install.packages("gridExtra")
1743849653930:install.packages("gridExtra")
1743849656176:install.packages("ggplot2")
1743849658697:install.packages("VIM")
1743849658698:install.packages("mice")
1743849658699:install.packages("caret")
1743849658700:install.packages("randomForest")
1743849660007:install.packages("randomForest")
1743849662380:install.packages("caret")
1743849664759:install.packages("mice")
1743849664761:install.packages("VIM")
1743849667307:install.packages("VIM")
1743849670077:install.packages("mice")
1743849716567:library(dplyr)
1743849716568:library(e1071)
1743849716568:library(gridExtra)
1743849716569:library(ggplot2)
1743849716569:library(VIM)
1743849716570:library(mice)
1743849716570:library(caret)
1743849716571:library(randomForest)
1743849716571:library(GGally)
1743849716571:library(plotly)
1743849716572:library(tidyr)
1743849716572:library(dplyr)
1743849716572:library(tidyverse)
1743849716575:# seed
1743849716575:set.seed(123)
1743849716576:# dataset
1743849716576:winequality <- read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv", sep = ";")
1743849717992:tail(winequality, n=3)
1743849717996:# summary
1743849717996:summary(winequality)
1743849718004:# === OUTLIER HANDLING ===
1743849718004:# check outlier
1743849718004:png("outlier_check_before.png", width = 1200, height = 400)
1743849718005:par(mfrow = c(1, 3))
1743849718006:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743849718006:for (var in outlier_vars) {
1743849718006:boxplot(winequality[[var]],
1743849718006:main = paste(var, "Distribution"),
1743849718006:ylab = var)
1743849718006:}
1743849718116:dev.off()
1743849718136:# IQR
1743849718137:detect_outliers <- function(x) {
1743849718137:Q1 <- quantile(x, 0.25, na.rm = TRUE)
1743849718137:Q3 <- quantile(x, 0.75, na.rm = TRUE)
1743849718137:IQR <- Q3 - Q1
1743849718137:lower_bound <- Q1 - 1.5 * IQR
1743849718137:upper_bound <- Q3 + 1.5 * IQR
1743849718137:return(list(lower = lower_bound, upper = upper_bound))
1743849718138:}
1743849718138:# winsorize outliers
1743849718138:winsorize_iqr <- function(x) {
1743849718138:bounds <- detect_outliers(x)
1743849718138:x[x < bounds$lower] <- bounds$lower
1743849718138:x[x > bounds$upper] <- bounds$upper
1743849718138:return(x)
1743849718139:}
1743849718139:winequality <- winequality %>%
1743849718139:mutate(across(all_of(outlier_vars), ~ winsorize_iqr(.x)))
1743849718155:tail(winequality, n=3)
1743849718157:summary(winequality)
1743849718165:# check outlier
1743849718165:png("outlier_check_after.png", width = 1200, height = 400)
1743849718165:par(mfrow = c(1, 3))
1743849718165:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743849718166:for (var in outlier_vars) {
1743849718166:boxplot(winequality[[var]],
1743849718166:main = paste(var, "Distribution"),
1743849718166:ylab = var)
1743849718166:}
1743849718176:dev.off()
1743849718195:# === LOG TRANSFORMATION ===
1743849718195:# calc skewness
1743849718195:numeric_vars <- names(winequality)[sapply(winequality, is.numeric)]
1743849718195:skewness_report <- data.frame(
1743849718195:Variable = numeric_vars,
1743849718196:Skewness = round(sapply(winequality[, numeric_vars], skewness), 2)
1743849718196:)
1743849718198:skewness_report <- skewness_report[order(-abs(skewness_report$Skewness)), ]
1743849718199:print("Skewness Report (Before Transformation):")
1743849718199:print(skewness_report)
1743849718200:high_skew_vars <- skewness_report %>%
1743849718201:filter(Skewness > 1) %>%
1743849718201:pull(Variable)
1743849718203:# check skewness
1743849718203:original_plots <- lapply(high_skew_vars, function(var) {
1743849718203:skew_val <- round(skewness(winequality[[var]]), 2)
1743849718203:ggplot(winequality, aes_string(var)) +
1743849718203:geom_histogram(bins = 30, fill = "lightblue", color = "black") +
1743849718203:geom_vline(aes(xintercept = mean(winequality[[var]])),
1743849718204:color = "red", linetype = "dashed") +
1743849718204:annotate("text", x = Inf, y = Inf,
1743849718204:label = paste("Skewness:", skew_val),
1743849718204:hjust = 1.2, vjust = 1.2, size = 4) +
1743849718204:ggtitle(paste("Original", var)) +
1743849718204:theme_minimal()
1743849718204:})
1743849718252:# log transformation
1743849718252:winequality <- winequality %>%
1743849718252:mutate(across(all_of(outlier_vars), ~ log1p(.x)))
1743849718257:# check skewness
1743849718257:transformed_plots <- lapply(outlier_vars, function(var) {
1743849718257:skew_val <- round(skewness(winequality[[var]]), 2)
1743849718257:ggplot(winequality, aes(x = .data[[var]])) +
1743849718257:geom_histogram(bins = 30, fill = "lightgreen", color = "black") +
1743849718258:geom_vline(aes(xintercept = mean(.data[[var]])),
1743849718258:color = "darkgreen", linetype = "dashed") +
1743849718258:annotate("text", x = Inf, y = Inf,
1743849718258:label = paste("Skewness:", skew_val),
1743849718258:hjust = 1.2, vjust = 1.2, size = 4) +
1743849718258:ggtitle(paste("Transformed", var)) +
1743849718258:theme_minimal()
1743849718258:})
1743849718300:# display plots
1743849718300:combined_plots <- c(original_plots, transformed_plots)
1743849718300:ggsave(
1743849718300:"log_transformation.png",
1743849718300:arrangeGrob(grobs = combined_plots, ncol = 3, nrow = 2),
1743849718300:width = 14, height = 8
1743849718300:)
1743849719370:# === MISSING VALUE HANDLING ====
1743849719370:# check missing
1743849719370:sum(is.na(winequality))
1743849719371:# introduce missing value
1743849719371:winequality_missing <- winequality
1743849719371:predictor_vars <- setdiff(names(winequality_missing), "quality")
1743849719371:for (col in predictor_vars) {
1743849719372:if (is.numeric(winequality_missing[[col]])) {
1743849719372:winequality_missing[[col]][sample(1:nrow(winequality_missing), 1000)] <- NA
1743849719372:}
1743849719372:}
1743849719379:# missing report
1743849719379:missing_report <- data.frame(
1743849719379:Variable = names(winequality_missing),
1743849719379:Missing = sapply(winequality_missing, function(x) sum(is.na(x))),
1743849719379:Percent = round(sapply(winequality_missing, function(x) mean(is.na(x)))*100, 2)
1743849719379:)
1743849719383:print("Missing Value Report:")
1743849719383:print(missing_report)
1743849719385:# mean imputation
1743849719385:method1 <- mice(
1743849719385:winequality_missing,
1743849719385:method = "mean",  # Correct method name for mean imputation
1743849719386:m = 1,
1743849719386:maxit = 1,
1743849719386:printFlag = FALSE
1743849719386:)
1743849719477:winequality_mean <- complete(method1)
1743849719479:# KNN imputation
1743849719479:method2 <- mice(
1743849719479:winequality_missing,
1743849719479:method = "pmm",
1743849719479:m = 1,
1743849719479:maxit = 1,
1743849719480:printFlag = FALSE
1743849719480:)
1743849719620:winequality_knn <- complete(method2)
1743849719624:# compare imputation
1743849719624:compare_imputation <- function(original, method1, method2, var) {
1743849719624:# Original distribution
1743849719624:p1 <- ggplot(data.frame(value = original[[var]]), aes(x = value)) +
1743849719624:geom_density(color = "blue", fill = "blue", alpha = 0.3) +
1743849719624:ggtitle("Original Distribution")
1743849719624:# mean imputation
1743849719624:p2 <- ggplot(data.frame(value = method1[[var]]), aes(x = value)) +
1743849719625:geom_density(color = "red", fill = "red", alpha = 0.3) +
1743849719625:ggtitle("Mean Imputation")
1743849719625:# KNN imputation
1743849719625:p3 <- ggplot(data.frame(value = method2[[var]]), aes(x = value)) +
1743849719625:geom_density(color = "green", fill = "green", alpha = 0.3) +
1743849719625:ggtitle("K-NN Imputation")
1743849719625:grid.arrange(p1, p2, p3, ncol = 3)
1743849719625:}
1743849719626:png("missing_handling_1.png", width = 1200, height = 800, res = 150)
1743849719626:compare_imputation(winequality, winequality_mean, winequality_knn, "residual.sugar")
1743849719913:dev.off()
1743849719958:compare_violin <- function(original, method1, method2, var) {
1743849719958:df <- data.frame(
1743849719958:Value = c(original[[var]], method1[[var]], method2[[var]]),
1743849719958:Type = c(rep("Original", nrow(original)),
1743849719958:rep("Imputed", nrow(method1)*2)),
1743849719959:Method = c(rep("Original", nrow(original)),
1743849719959:rep("Mean", nrow(method1)),
1743849719959:rep("K-NN", nrow(method2)))
1743849719959:)
1743849719959:ggplot(df, aes(x = Method, y = Value, fill = Type)) +
1743849719959:geom_violin(alpha = 0.5, trim = FALSE) +
1743849719959:geom_jitter(aes(color = Type), width = 0.2, alpha = 0.3) +
1743849719959:ggtitle(paste("Distribution Comparison for", var)) +
1743849719959:theme_minimal()
1743849719960:}
1743849719960:png("missing_handling_2.png", width = 1200, height = 800, res = 150)
1743849719961:compare_violin(winequality, winequality_mean, winequality_knn, "residual.sugar")
1743849720506:dev.off()
1743849720584:# === TRAIN-TEST SPLIT, MIN-MAX SCALING ===
1743849720584:data <- winequality_knn
1743849720585:split_ratios <- list(
1743849720585:"70-30" = 0.7,
1743849720585:"80-20" = 0.8,
1743849720585:"90-10" = 0.9
1743849720585:)
1743849720585:results <- data.frame()
1743849720585:for (split_name in names(split_ratios)) {
1743849720586:ratio <- split_ratios[[split_name]]
1743849720586:# split data
1743849720586:trainIndex <- createDataPartition(data$quality, p = ratio, list = FALSE)
1743849720586:train_data <- data[trainIndex, ]
1743849720586:test_data <- data[-trainIndex, ]
1743849720587:# min-max scaling
1743849720587:preproc <- preProcess(train_data[, -which(names(train_data) == "quality")], method = "range")
1743849720587:train_scaled <- predict(preproc, train_data)
1743849720588:test_scaled <- predict(preproc, test_data)
1743849720588:# modeling
1743849720588:model <- randomForest(
1743849720589:x = train_scaled[, -which(names(train_scaled) == "quality")],
1743849720589:y = train_scaled$quality,
1743849720589:ntree = 100,
1743849720589:importance = TRUE
1743849720589:)
1743849720590:# predict
1743849720590:predictions <- predict(model, test_scaled[, -which(names(test_scaled) == "quality")])
1743849720590:# metrics
1743849720590:rmse <- sqrt(mean((predictions - test_data$quality)^2))
1743849720591:mae <- mean(abs(predictions - test_data$quality))
1743849720591:r_squared <- cor(predictions, test_data$quality)^2
1743849720591:results <- rbind(results, data.frame(
1743849720591:Split = split_name,  # Use split_name directly
1743849720592:RMSE = round(rmse, 2),
1743849720592:MAE = round(mae, 2),
1743849720592:R_Squared = round(r_squared, 2),
1743849720592:Train_Size = nrow(train_data),
1743849720592:Test_Size = nrow(test_data)
1743849720593:))
1743849720593:}
1743849832983:library(dplyr)
1743849833016:library(e1071)
1743849833083:library(gridExtra)
1743849833111:library(ggplot2)
1743849833131:library(VIM)
1743849834751:library(mice)
1743849835153:library(caret)
1743849835946:library(randomForest)
1743849835969:library(GGally)
1743849835981:library(plotly)
1743849836059:library(tidyr)
1743849836092:library(dplyr)
1743849836092:library(tidyverse)
1743849836482:# seed
1743849836482:set.seed(123)
1743849836483:# dataset
1743849836483:winequality <- read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv", sep = ";")
1743849838025:tail(winequality, n=3)
1743849838060:# summary
1743849838060:summary(winequality)
1743849838076:# === OUTLIER HANDLING ===
1743849838076:# check outlier
1743849838077:png("outlier_check_before.png", width = 1200, height = 400)
1743849838086:par(mfrow = c(1, 3))
1743849838086:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743849838086:for (var in outlier_vars) {
1743849838086:boxplot(winequality[[var]],
1743849838086:main = paste(var, "Distribution"),
1743849838086:ylab = var)
1743849838086:}
1743849838118:dev.off()
1743849838138:# IQR
1743849838138:detect_outliers <- function(x) {
1743849838138:Q1 <- quantile(x, 0.25, na.rm = TRUE)
1743849838138:Q3 <- quantile(x, 0.75, na.rm = TRUE)
1743849838138:IQR <- Q3 - Q1
1743849838138:lower_bound <- Q1 - 1.5 * IQR
1743849838138:upper_bound <- Q3 + 1.5 * IQR
1743849838138:return(list(lower = lower_bound, upper = upper_bound))
1743849838138:}
1743849838139:# winsorize outliers
1743849838139:winsorize_iqr <- function(x) {
1743849838139:bounds <- detect_outliers(x)
1743849838139:x[x < bounds$lower] <- bounds$lower
1743849838139:x[x > bounds$upper] <- bounds$upper
1743849838139:return(x)
1743849838139:}
1743849838139:winequality <- winequality %>%
1743849838139:mutate(across(all_of(outlier_vars), ~ winsorize_iqr(.x)))
1743849838188:tail(winequality, n=3)
1743849838191:summary(winequality)
1743849838197:# check outlier
1743849838198:png("outlier_check_after.png", width = 1200, height = 400)
1743849838198:par(mfrow = c(1, 3))
1743849838198:outlier_vars <- c("residual.sugar", "chlorides", "total.sulfur.dioxide")
1743849838198:for (var in outlier_vars) {
1743849838198:boxplot(winequality[[var]],
1743849838198:main = paste(var, "Distribution"),
1743849838198:ylab = var)
1743849838199:}
1743849838209:dev.off()
1743849838232:# === LOG TRANSFORMATION ===
1743849838232:# calc skewness
1743849838233:numeric_vars <- names(winequality)[sapply(winequality, is.numeric)]
1743849838233:skewness_report <- data.frame(
1743849838233:Variable = numeric_vars,
1743849838233:Skewness = round(sapply(winequality[, numeric_vars], skewness), 2)
1743849838233:)
1743849838236:skewness_report <- skewness_report[order(-abs(skewness_report$Skewness)), ]
1743849838237:print("Skewness Report (Before Transformation):")
1743849838237:print(skewness_report)
1743849838238:high_skew_vars <- skewness_report %>%
1743849838238:filter(Skewness > 1) %>%
1743849838238:pull(Variable)
1743849838241:# check skewness
1743849838241:original_plots <- lapply(high_skew_vars, function(var) {
1743849838241:skew_val <- round(skewness(winequality[[var]]), 2)
1743849838241:ggplot(winequality, aes_string(var)) +
1743849838242:geom_histogram(bins = 30, fill = "lightblue", color = "black") +
1743849838242:geom_vline(aes(xintercept = mean(winequality[[var]])),
1743849838242:color = "red", linetype = "dashed") +
1743849838242:annotate("text", x = Inf, y = Inf,
1743849838242:label = paste("Skewness:", skew_val),
1743849838242:hjust = 1.2, vjust = 1.2, size = 4) +
1743849838242:ggtitle(paste("Original", var)) +
1743849838242:theme_minimal()
1743849838242:})
1743849838376:# log transformation
1743849838376:winequality <- winequality %>%
1743849838376:mutate(across(all_of(outlier_vars), ~ log1p(.x)))
1743849838379:# check skewness
1743849838380:transformed_plots <- lapply(outlier_vars, function(var) {
1743849838380:skew_val <- round(skewness(winequality[[var]]), 2)
1743849838380:ggplot(winequality, aes(x = .data[[var]])) +
1743849838380:geom_histogram(bins = 30, fill = "lightgreen", color = "black") +
1743849838380:geom_vline(aes(xintercept = mean(.data[[var]])),
1743849838380:color = "darkgreen", linetype = "dashed") +
1743849838380:annotate("text", x = Inf, y = Inf,
1743849838380:label = paste("Skewness:", skew_val),
1743849838380:hjust = 1.2, vjust = 1.2, size = 4) +
1743849838380:ggtitle(paste("Transformed", var)) +
1743849838381:theme_minimal()
1743849838381:})
1743849838436:# display plots
1743849838436:combined_plots <- c(original_plots, transformed_plots)
1743849838437:ggsave(
1743849838437:"log_transformation.png",
1743849838437:arrangeGrob(grobs = combined_plots, ncol = 3, nrow = 2),
1743849838437:width = 14, height = 8
1743849838437:)
1743849839663:# === MISSING VALUE HANDLING ====
1743849839663:# check missing
1743849839663:sum(is.na(winequality))
1743849839664:# introduce missing value
1743849839664:winequality_missing <- winequality
1743849839664:predictor_vars <- setdiff(names(winequality_missing), "quality")
1743849839664:for (col in predictor_vars) {
1743849839664:if (is.numeric(winequality_missing[[col]])) {
1743849839664:winequality_missing[[col]][sample(1:nrow(winequality_missing), 1000)] <- NA
1743849839664:}
1743849839664:}
1743849839671:# missing report
1743849839671:missing_report <- data.frame(
1743849839671:Variable = names(winequality_missing),
1743849839672:Missing = sapply(winequality_missing, function(x) sum(is.na(x))),
1743849839672:Percent = round(sapply(winequality_missing, function(x) mean(is.na(x)))*100, 2)
1743849839672:)
1743849839676:print("Missing Value Report:")
1743849839676:print(missing_report)
1743849839678:# mean imputation
1743849839678:method1 <- mice(
1743849839678:winequality_missing,
1743849839678:method = "mean",  # Correct method name for mean imputation
1743849839678:m = 1,
1743849839678:maxit = 1,
1743849839678:printFlag = FALSE
1743849839678:)
1743849839830:winequality_mean <- complete(method1)
1743849839834:# KNN imputation
1743849839834:method2 <- mice(
1743849839834:winequality_missing,
1743849839835:method = "pmm",
1743849839835:m = 1,
1743849839835:maxit = 1,
1743849839835:printFlag = FALSE
1743849839835:)
1743849840325:winequality_knn <- complete(method2)
1743849840328:# compare imputation
1743849840328:compare_imputation <- function(original, method1, method2, var) {
1743849840328:# Original distribution
1743849840328:p1 <- ggplot(data.frame(value = original[[var]]), aes(x = value)) +
1743849840328:geom_density(color = "blue", fill = "blue", alpha = 0.3) +
1743849840328:ggtitle("Original Distribution")
1743849840329:# mean imputation
1743849840329:p2 <- ggplot(data.frame(value = method1[[var]]), aes(x = value)) +
1743849840329:geom_density(color = "red", fill = "red", alpha = 0.3) +
1743849840329:ggtitle("Mean Imputation")
1743849840329:# KNN imputation
1743849840329:p3 <- ggplot(data.frame(value = method2[[var]]), aes(x = value)) +
1743849840329:geom_density(color = "green", fill = "green", alpha = 0.3) +
1743849840329:ggtitle("K-NN Imputation")
1743849840329:grid.arrange(p1, p2, p3, ncol = 3)
1743849840329:}
1743849840330:png("missing_handling_1.png", width = 1200, height = 800, res = 150)
1743849840330:compare_imputation(winequality, winequality_mean, winequality_knn, "residual.sugar")
1743849840699:dev.off()
1743849840743:compare_violin <- function(original, method1, method2, var) {
1743849840743:df <- data.frame(
1743849840743:Value = c(original[[var]], method1[[var]], method2[[var]]),
1743849840743:Type = c(rep("Original", nrow(original)),
1743849840743:rep("Imputed", nrow(method1)*2)),
1743849840743:Method = c(rep("Original", nrow(original)),
1743849840743:rep("Mean", nrow(method1)),
1743849840743:rep("K-NN", nrow(method2)))
1743849840744:)
1743849840744:ggplot(df, aes(x = Method, y = Value, fill = Type)) +
1743849840744:geom_violin(alpha = 0.5, trim = FALSE) +
1743849840744:geom_jitter(aes(color = Type), width = 0.2, alpha = 0.3) +
1743849840744:ggtitle(paste("Distribution Comparison for", var)) +
1743849840744:theme_minimal()
1743849840744:}
1743849840745:png("missing_handling_2.png", width = 1200, height = 800, res = 150)
1743849840746:compare_violin(winequality, winequality_mean, winequality_knn, "residual.sugar")
1743849841337:dev.off()
1743849841408:# === TRAIN-TEST SPLIT, MIN-MAX SCALING ===
1743849841408:data <- winequality_knn
1743849841408:split_ratios <- list(
1743849841408:"70-30" = 0.7,
1743849841408:"80-20" = 0.8,
1743849841408:"90-10" = 0.9
1743849841408:)
1743849841409:results <- data.frame()
1743849841409:for (split_name in names(split_ratios)) {
1743849841409:ratio <- split_ratios[[split_name]]
1743849841409:# split data
1743849841409:trainIndex <- createDataPartition(data$quality, p = ratio, list = FALSE)
1743849841409:train_data <- data[trainIndex, ]
1743849841409:test_data <- data[-trainIndex, ]
1743849841409:# min-max scaling
1743849841409:preproc <- preProcess(train_data[, -which(names(train_data) == "quality")], method = "range")
1743849841410:train_scaled <- predict(preproc, train_data)
1743849841410:test_scaled <- predict(preproc, test_data)
1743849841410:# modeling
1743849841410:model <- randomForest(
1743849841410:x = train_scaled[, -which(names(train_scaled) == "quality")],
1743849841410:y = train_scaled$quality,
1743849841410:ntree = 100,
1743849841410:importance = TRUE
1743849841410:)
1743849841410:# predict
1743849841411:predictions <- predict(model, test_scaled[, -which(names(test_scaled) == "quality")])
1743849841411:# metrics
1743849841411:rmse <- sqrt(mean((predictions - test_data$quality)^2))
1743849841411:mae <- mean(abs(predictions - test_data$quality))
1743849841411:r_squared <- cor(predictions, test_data$quality)^2
1743849841411:results <- rbind(results, data.frame(
1743849841411:Split = split_name,  # Use split_name directly
1743849841411:RMSE = round(rmse, 2),
1743849841412:MAE = round(mae, 2),
1743849841412:R_Squared = round(r_squared, 2),
1743849841412:Train_Size = nrow(train_data),
1743849841412:Test_Size = nrow(test_data)
1743849841412:))
1743849841412:}
1743849847872:# RMSE
1743849847872:print("Model Performance Across Splits:")
1743849847873:print(results)
1743849847874:png("RMSE.png", width = 1200, height = 800, res = 150)
1743849847875:ggplot(results, aes(x = Split, y = RMSE, fill = Split)) +
1743849847875:geom_bar(stat = "identity") +
1743849847875:geom_text(aes(label = RMSE), vjust = -0.5) +
1743849847875:labs(title = "Model Performance Comparison (RMSE)",
1743849847875:y = "Root Mean Squared Error",
1743849847875:x = "Train-Test Split Ratio") +
1743849847875:theme_minimal()
1743849848118:dev.off()
1743849848155:# === VISUALIZE MIN-MAX SCALE ===
1743849848156:comparison_all <- predictor_vars %>%
1743849848156:map_dfr(~{
1743849848156:tibble(
1743849848156:Feature = .x,
1743849848156:Original = train_data[[.x]],   # From original data
1743849848156:Scaled = train_scaled[[.x]]    # From scaled data
1743849848156:) %>%
1743849848156:pivot_longer(cols = c(Original, Scaled),
1743849848156:names_to = "Type",
1743849848156:values_to = "Value")
1743849848156:})
1743849848207:summary_all <- comparison_all %>%
1743849848207:group_by(Feature, Type) %>%
1743849848207:summarise(
1743849848207:Min = min(Value),
1743849848208:Max = max(Value),
1743849848208:.groups = 'drop'
1743849848208:)
1743849848216:# layout
1743849848216:n_features <- length(predictor_vars)
1743849848216:n_rows <- ceiling(n_features / 2)
1743849848216:height <- max(8, n_rows * 2.5)
1743849848216:ggplot(comparison_all, aes(x = Value, fill = Type)) +
1743849848217:geom_histogram(bins = 30, alpha = 0.5, position = "identity") +
1743849848217:# min/max lines
1743849848217:geom_vline(data = summary_all,
1743849848217:aes(xintercept = Min, color = Type),
1743849848217:linetype = "dashed") +
1743849848217:geom_vline(data = summary_all,
1743849848217:aes(xintercept = Max, color = Type),
1743849848217:linetype = "dashed") +
1743849848217:# Facet grid
1743849848217:facet_wrap(~ Feature,
1743849848217:scales = "free",
1743849848217:ncol = 2,
1743849848217:labeller = label_wrap_gen(width = 25)) +
1743849848218:# color & style
1743849848218:scale_fill_manual(values = c("Original" = "lightblue", "Scaled" = "lightgreen")) +
1743849848218:scale_color_manual(values = c("Original" = "blue", "Scaled" = "green")) +
1743849848218:labs(title = "Min-Max Scaling Effects Across All Features",
1743849848218:subtitle = "Blue: Original | Green: Scaled [0,1]",
1743849848218:x = "Value",
1743849848218:y = "Count") +
1743849848218:theme_minimal() +
1743849848218:theme(
1743849848218:legend.position = "bottom",
1743849848219:axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
1743849848219:strip.text = element_text(size = 9, face = "bold"),
1743849848219:panel.spacing = unit(1.5, "lines"),  # Increased spacing between panels
1743849848219:plot.title = element_text(size = 14),
1743849848219:plot.subtitle = element_text(size = 11)
1743849848219:)
1743849849231:# Save with appropriate dimensions
1743849849231:ggsave("min_max_scaling.png",
1743849849231:width = 16,
1743849849231:height = height,
1743849849231:units = "in",
1743849849231:dpi = 300)
1743852898450:n_features <- length(predictor_vars)
1743852898450:n_rows <- ceiling(n_features / 1)
1743852898451:height <- max(8, n_rows * 2.5)
1743852898451:ggplot(comparison_all, aes(x = Value, fill = Type)) +
1743852898451:geom_histogram(bins = 30, alpha = 0.5, position = "identity") +
1743852898451:# min/max lines
1743852898451:geom_vline(data = summary_all,
1743852898451:aes(xintercept = Min, color = Type),
1743852898451:linetype = "dashed") +
1743852898452:geom_vline(data = summary_all,
1743852898452:aes(xintercept = Max, color = Type),
1743852898452:linetype = "dashed") +
1743852898452:# Facet grid
1743852898452:facet_wrap(~ Feature,
1743852898452:scales = "free",
1743852898452:ncol = 2,
1743852898453:labeller = label_wrap_gen(width = 25)) +
1743852898453:# color & style
1743852898453:scale_fill_manual(values = c("Original" = "lightblue", "Scaled" = "lightgreen")) +
1743852898453:scale_color_manual(values = c("Original" = "blue", "Scaled" = "green")) +
1743852898453:labs(title = "Min-Max Scaling Effects Across All Features",
1743852898454:subtitle = "Blue: Original | Green: Scaled [0,1]",
1743852898454:x = "Value",
1743852898454:y = "Count") +
1743852898454:theme_minimal() +
1743852898454:theme(
1743852898455:legend.position = "bottom",
1743852898455:axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
1743852898455:strip.text = element_text(size = 9, face = "bold"),
1743852898455:panel.spacing = unit(1.5, "lines"),  # Increased spacing between panels
1743852898456:plot.title = element_text(size = 14),
1743852898456:plot.subtitle = element_text(size = 11)
1743852898456:)
1743852899301:# Save with appropriate dimensions
1743852899301:ggsave("min_max_scaling.png",
1743852899301:width = 16,
1743852899301:height = height,
1743852899302:units = "in",
1743852899302:dpi = 300)
1743852918300:# layout
1743852918300:n_features <- length(predictor_vars)
1743852918300:n_rows <- ceiling(n_features / 1)
1743852918300:height <- max(8, n_rows * 2.5)
1743852918301:ggplot(comparison_all, aes(x = Value, fill = Type)) +
1743852918301:geom_histogram(bins = 30, alpha = 0.5, position = "identity") +
1743852918301:# min/max lines
1743852918301:geom_vline(data = summary_all,
1743852918301:aes(xintercept = Min, color = Type),
1743852918302:linetype = "dashed") +
1743852918302:geom_vline(data = summary_all,
1743852918302:aes(xintercept = Max, color = Type),
1743852918302:linetype = "dashed") +
1743852918302:# Facet grid
1743852918303:facet_wrap(~ Feature,
1743852918303:scales = "free",
1743852918303:ncol = 1,
1743852918303:labeller = label_wrap_gen(width = 25)) +
1743852918303:# color & style
1743852918303:scale_fill_manual(values = c("Original" = "lightblue", "Scaled" = "lightgreen")) +
1743852918303:scale_color_manual(values = c("Original" = "blue", "Scaled" = "green")) +
1743852918304:labs(title = "Min-Max Scaling Effects Across All Features",
1743852918304:subtitle = "Blue: Original | Green: Scaled [0,1]",
1743852918304:x = "Value",
1743852918304:y = "Count") +
1743852918304:theme_minimal() +
1743852918304:theme(
1743852918305:legend.position = "bottom",
1743852918305:axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
1743852918305:strip.text = element_text(size = 9, face = "bold"),
1743852918305:panel.spacing = unit(1.5, "lines"),  # Increased spacing between panels
1743852918305:plot.title = element_text(size = 14),
1743852918306:plot.subtitle = element_text(size = 11)
1743852918306:)
1743852919132:# Save with appropriate dimensions
1743852919133:ggsave("min_max_scaling.png",
1743852919133:width = 16,
1743852919133:height = height,
1743852919133:units = "in",
1743852919133:dpi = 300)
